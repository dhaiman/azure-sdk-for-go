package personalizer

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// StagedModelClient is the personalizer Service is an Azure Cognitive Service that makes it easy to target content and
// experiences without complex pre-analysis or cleanup of past data. Given a context and featurized content, the
// Personalizer Service returns which content item to show to users in rewardActionId. As rewards are sent in response
// to the use of rewardActionId, the reinforcement learning algorithm will improve the model and improve performance of
// future rank calls.
type StagedModelClient struct {
	BaseClient
}

// NewStagedModelClient creates an instance of the StagedModelClient client.
func NewStagedModelClient(endpoint string) StagedModelClient {
	return StagedModelClient{New(endpoint)}
}

// GetByID get the staged model file generated by Personalizer service, given a model id.
func (client StagedModelClient) GetByID(ctx context.Context, ID string) (result ReadCloser, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/StagedModelClient.GetByID")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: ID,
			Constraints: []validation.Constraint{{Target: "ID", Name: validation.MaxLength, Rule: 256, Chain: nil}}}}); err != nil {
		return result, validation.NewError("personalizer.StagedModelClient", "GetByID", err.Error())
	}

	req, err := client.GetByIDPreparer(ctx, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "GetByID", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetByIDSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "GetByID", resp, "Failure sending request")
		return
	}

	result, err = client.GetByIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "GetByID", resp, "Failure responding to request")
	}

	return
}

// GetByIDPreparer prepares the GetByID request.
func (client StagedModelClient) GetByIDPreparer(ctx context.Context, ID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"id": autorest.Encode("path", ID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/personalizer/v1.0", urlParameters),
		autorest.WithPathParameters("/staged-model/{id}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetByIDSender sends the GetByID request. The method will close the
// http.Response Body if it receives an error.
func (client StagedModelClient) GetByIDSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// GetByIDResponder handles the response to the GetByID request. The method always
// closes the http.Response Body.
func (client StagedModelClient) GetByIDResponder(resp *http.Response) (result ReadCloser, err error) {
	result.Value = &resp.Body
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK))
	result.Response = autorest.Response{Response: resp}
	return
}

// List list staged models generated by Personalizer service.
func (client StagedModelClient) List(ctx context.Context) (result ListModelMetadata, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/StagedModelClient.List")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListPreparer(ctx)
	if err != nil {
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "List", resp, "Failure sending request")
		return
	}

	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "List", resp, "Failure responding to request")
	}

	return
}

// ListPreparer prepares the List request.
func (client StagedModelClient) ListPreparer(ctx context.Context) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithCustomBaseURL("{Endpoint}/personalizer/v1.0", urlParameters),
		autorest.WithPath("/staged-model"))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client StagedModelClient) ListSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client StagedModelClient) ListResponder(resp *http.Response) (result ListModelMetadata, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result.Value),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Publish publish the staged model file generated by Personalizer service, given a model id.
func (client StagedModelClient) Publish(ctx context.Context, ID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/StagedModelClient.Publish")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: ID,
			Constraints: []validation.Constraint{{Target: "ID", Name: validation.MaxLength, Rule: 256, Chain: nil}}}}); err != nil {
		return result, validation.NewError("personalizer.StagedModelClient", "Publish", err.Error())
	}

	req, err := client.PublishPreparer(ctx, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "Publish", nil, "Failure preparing request")
		return
	}

	resp, err := client.PublishSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "Publish", resp, "Failure sending request")
		return
	}

	result, err = client.PublishResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "Publish", resp, "Failure responding to request")
	}

	return
}

// PublishPreparer prepares the Publish request.
func (client StagedModelClient) PublishPreparer(ctx context.Context, ID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"id": autorest.Encode("path", ID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPut(),
		autorest.WithCustomBaseURL("{Endpoint}/personalizer/v1.0", urlParameters),
		autorest.WithPathParameters("/staged-model/{id}/publish", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PublishSender sends the Publish request. The method will close the
// http.Response Body if it receives an error.
func (client StagedModelClient) PublishSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// PublishResponder handles the response to the Publish request. The method always
// closes the http.Response Body.
func (client StagedModelClient) PublishResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// ResetByID reset the staged model file generated by Personalizer service, given a model id.
func (client StagedModelClient) ResetByID(ctx context.Context, ID string) (result autorest.Response, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/StagedModelClient.ResetByID")
		defer func() {
			sc := -1
			if result.Response != nil {
				sc = result.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: ID,
			Constraints: []validation.Constraint{{Target: "ID", Name: validation.MaxLength, Rule: 256, Chain: nil}}}}); err != nil {
		return result, validation.NewError("personalizer.StagedModelClient", "ResetByID", err.Error())
	}

	req, err := client.ResetByIDPreparer(ctx, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "ResetByID", nil, "Failure preparing request")
		return
	}

	resp, err := client.ResetByIDSender(req)
	if err != nil {
		result.Response = resp
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "ResetByID", resp, "Failure sending request")
		return
	}

	result, err = client.ResetByIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "ResetByID", resp, "Failure responding to request")
	}

	return
}

// ResetByIDPreparer prepares the ResetByID request.
func (client StagedModelClient) ResetByIDPreparer(ctx context.Context, ID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"id": autorest.Encode("path", ID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithCustomBaseURL("{Endpoint}/personalizer/v1.0", urlParameters),
		autorest.WithPathParameters("/staged-model/{id}", pathParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ResetByIDSender sends the ResetByID request. The method will close the
// http.Response Body if it receives an error.
func (client StagedModelClient) ResetByIDSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// ResetByIDResponder handles the response to the ResetByID request. The method always
// closes the http.Response Body.
func (client StagedModelClient) ResetByIDResponder(resp *http.Response) (result autorest.Response, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByClosing())
	result.Response = resp
	return
}

// UpdateMetadataByID update the metadata of a staged model, given a model id.
// Only the boolean `savedInHistory` and the string `userDescription` can be updated. Other fields are readonly.
func (client StagedModelClient) UpdateMetadataByID(ctx context.Context, metadata ModelMetadata, ID string) (result ModelMetadata, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/StagedModelClient.UpdateMetadataByID")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: metadata,
			Constraints: []validation.Constraint{{Target: "metadata.ModelID", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "metadata.UserDescription", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "metadata.CreationDate", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "metadata.LastConfigEditDate", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "metadata.FirstEventID", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "metadata.LastEventID", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "metadata.SavedInHistory", Name: validation.Null, Rule: true, Chain: nil},
				{Target: "metadata.NumberOfEventsLearnedSinceLastExport", Name: validation.Null, Rule: true, Chain: nil}}},
		{TargetValue: ID,
			Constraints: []validation.Constraint{{Target: "ID", Name: validation.MaxLength, Rule: 256, Chain: nil}}}}); err != nil {
		return result, validation.NewError("personalizer.StagedModelClient", "UpdateMetadataByID", err.Error())
	}

	req, err := client.UpdateMetadataByIDPreparer(ctx, metadata, ID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "UpdateMetadataByID", nil, "Failure preparing request")
		return
	}

	resp, err := client.UpdateMetadataByIDSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "UpdateMetadataByID", resp, "Failure sending request")
		return
	}

	result, err = client.UpdateMetadataByIDResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "personalizer.StagedModelClient", "UpdateMetadataByID", resp, "Failure responding to request")
	}

	return
}

// UpdateMetadataByIDPreparer prepares the UpdateMetadataByID request.
func (client StagedModelClient) UpdateMetadataByIDPreparer(ctx context.Context, metadata ModelMetadata, ID string) (*http.Request, error) {
	urlParameters := map[string]interface{}{
		"Endpoint": client.Endpoint,
	}

	pathParameters := map[string]interface{}{
		"id": autorest.Encode("path", ID),
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithCustomBaseURL("{Endpoint}/personalizer/v1.0", urlParameters),
		autorest.WithPathParameters("/staged-model/{id}", pathParameters),
		autorest.WithJSON(metadata))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// UpdateMetadataByIDSender sends the UpdateMetadataByID request. The method will close the
// http.Response Body if it receives an error.
func (client StagedModelClient) UpdateMetadataByIDSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
}

// UpdateMetadataByIDResponder handles the response to the UpdateMetadataByID request. The method always
// closes the http.Response Body.
func (client StagedModelClient) UpdateMetadataByIDResponder(resp *http.Response) (result ModelMetadata, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
