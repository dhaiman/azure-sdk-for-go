package personalizer

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// ErrorCode enumerates the values for error code.
type ErrorCode string

const (
	// AggregationEventCountInvalid Aggregation transaction count must be a multiple of ten thousand.
	AggregationEventCountInvalid ErrorCode = "AggregationEventCountInvalid"
	// AggregationEventCountTooSmall Aggregation transaction count cannot be less ten thousand.
	AggregationEventCountTooSmall ErrorCode = "AggregationEventCountTooSmall"
	// AggregationIntervalInvalid Aggregation interval must be a multiple of one hour.
	AggregationIntervalInvalid ErrorCode = "AggregationIntervalInvalid"
	// AggregationIntervalTooShort Aggregation interval must not be less than an hour.
	AggregationIntervalTooShort ErrorCode = "AggregationIntervalTooShort"
	// ApprenticeModeNeverTurnedOn Apprentice mode never turned on.
	ApprenticeModeNeverTurnedOn ErrorCode = "ApprenticeModeNeverTurnedOn"
	// BadRequest Request could not be understood by the server.
	BadRequest ErrorCode = "BadRequest"
	// DuplicateCustomPolicyNames Custom policy names should be unique.
	DuplicateCustomPolicyNames ErrorCode = "DuplicateCustomPolicyNames"
	// EvaluationNotFound Evaluation not found.
	EvaluationNotFound ErrorCode = "EvaluationNotFound"
	// FrontEndNotFound Front end not found.
	FrontEndNotFound ErrorCode = "FrontEndNotFound"
	// InternalServerError A generic error has occurred on the server.
	InternalServerError ErrorCode = "InternalServerError"
	// InvalidContainer SAS Uri must be the Uri to a container that has write permissions.
	InvalidContainer ErrorCode = "InvalidContainer"
	// InvalidEvaluationContract Invalid evaluation contract.
	InvalidEvaluationContract ErrorCode = "InvalidEvaluationContract"
	// InvalidEventIDToActivate Invalid activate event request.
	InvalidEventIDToActivate ErrorCode = "InvalidEventIdToActivate"
	// InvalidExportLogsRequest Invalid export logs request.
	InvalidExportLogsRequest ErrorCode = "InvalidExportLogsRequest"
	// InvalidLearningModeServiceConfiguration Updating defaultReward, rewardWaitTime and rewardAggregation
	// when changing learning mode from Online to Apprentice mode and vice versa is not allowed.
	InvalidLearningModeServiceConfiguration ErrorCode = "InvalidLearningModeServiceConfiguration"
	// InvalidModelMetadata Invalid model metadata.
	InvalidModelMetadata ErrorCode = "InvalidModelMetadata"
	// InvalidPolicyConfiguration Invalid policy configuration.
	InvalidPolicyConfiguration ErrorCode = "InvalidPolicyConfiguration"
	// InvalidPolicyContract Invalid policy contract.
	InvalidPolicyContract ErrorCode = "InvalidPolicyContract"
	// InvalidRankRequest Invalid rank request.
	InvalidRankRequest ErrorCode = "InvalidRankRequest"
	// InvalidRewardRequest Invalid reward request.
	InvalidRewardRequest ErrorCode = "InvalidRewardRequest"
	// InvalidServiceConfiguration Invalid service configuration.
	InvalidServiceConfiguration ErrorCode = "InvalidServiceConfiguration"
	// InvalidStartDateEndDate Start date must not exceed the end date.
	InvalidStartDateEndDate ErrorCode = "InvalidStartDateEndDate"
	// KeyVaultNotFound Key vault not found.
	KeyVaultNotFound ErrorCode = "KeyVaultNotFound"
	// LogsPropertiesNotFound Logs properties not found.
	LogsPropertiesNotFound ErrorCode = "LogsPropertiesNotFound"
	// LogsSizeExceedAllowedLimit Total size of logs exceed allowed limit.
	LogsSizeExceedAllowedLimit ErrorCode = "LogsSizeExceedAllowedLimit"
	// MissingAppID AppId is missing in the header.
	MissingAppID ErrorCode = "MissingAppId"
	// ModelFileAccessDenied Key vault Key used for customer managed key cannot be accessed.
	ModelFileAccessDenied ErrorCode = "ModelFileAccessDenied"
	// ModelMetadataUpdateFailed Model metadata update failed.
	ModelMetadataUpdateFailed ErrorCode = "ModelMetadataUpdateFailed"
	// ModelPublishFailed Model publish failed.
	ModelPublishFailed ErrorCode = "ModelPublishFailed"
	// ModelRankingError Error while ranking actions using model. Please verify the learning settings are
	// valid.
	ModelRankingError ErrorCode = "ModelRankingError"
	// ModelResetFailed Model reset failed.
	ModelResetFailed ErrorCode = "ModelResetFailed"
	// NoLogsExistInDateRange No logs exist in date range.
	NoLogsExistInDateRange ErrorCode = "NoLogsExistInDateRange"
	// None None
	None ErrorCode = "None"
	// RankNullResponse Rank call returned null response.
	RankNullResponse ErrorCode = "RankNullResponse"
	// ResourceNotFound Requested resource does not exist on the server.
	ResourceNotFound ErrorCode = "ResourceNotFound"
	// UpdateConfigurationFailed Failed to update configuration.
	UpdateConfigurationFailed ErrorCode = "UpdateConfigurationFailed"
)

// PossibleErrorCodeValues returns an array of possible values for the ErrorCode const type.
func PossibleErrorCodeValues() []ErrorCode {
	return []ErrorCode{AggregationEventCountInvalid, AggregationEventCountTooSmall, AggregationIntervalInvalid, AggregationIntervalTooShort, ApprenticeModeNeverTurnedOn, BadRequest, DuplicateCustomPolicyNames, EvaluationNotFound, FrontEndNotFound, InternalServerError, InvalidContainer, InvalidEvaluationContract, InvalidEventIDToActivate, InvalidExportLogsRequest, InvalidLearningModeServiceConfiguration, InvalidModelMetadata, InvalidPolicyConfiguration, InvalidPolicyContract, InvalidRankRequest, InvalidRewardRequest, InvalidServiceConfiguration, InvalidStartDateEndDate, KeyVaultNotFound, LogsPropertiesNotFound, LogsSizeExceedAllowedLimit, MissingAppID, ModelFileAccessDenied, ModelMetadataUpdateFailed, ModelPublishFailed, ModelRankingError, ModelResetFailed, NoLogsExistInDateRange, None, RankNullResponse, ResourceNotFound, UpdateConfigurationFailed}
}

// EvaluationJobStatus enumerates the values for evaluation job status.
type EvaluationJobStatus string

const (
	// Completed ...
	Completed EvaluationJobStatus = "completed"
	// Failed ...
	Failed EvaluationJobStatus = "failed"
	// NotSubmitted ...
	NotSubmitted EvaluationJobStatus = "notSubmitted"
	// Pending ...
	Pending EvaluationJobStatus = "pending"
	// Timeout ...
	Timeout EvaluationJobStatus = "timeout"
)

// PossibleEvaluationJobStatusValues returns an array of possible values for the EvaluationJobStatus const type.
func PossibleEvaluationJobStatusValues() []EvaluationJobStatus {
	return []EvaluationJobStatus{Completed, Failed, NotSubmitted, Pending, Timeout}
}

// LearningMode enumerates the values for learning mode.
type LearningMode string

const (
	// Apprentice ...
	Apprentice LearningMode = "Apprentice"
	// LoggingOnly ...
	LoggingOnly LearningMode = "LoggingOnly"
	// Online ...
	Online LearningMode = "Online"
)

// PossibleLearningModeValues returns an array of possible values for the LearningMode const type.
func PossibleLearningModeValues() []LearningMode {
	return []LearningMode{Apprentice, LoggingOnly, Online}
}
