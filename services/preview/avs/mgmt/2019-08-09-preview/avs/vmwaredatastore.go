package avs

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// VMWareDatastoreClient is the azure VMware Solution API
type VMWareDatastoreClient struct {
	BaseClient
}

// NewVMWareDatastoreClient creates an instance of the VMWareDatastoreClient client.
func NewVMWareDatastoreClient(subscriptionID string) VMWareDatastoreClient {
	return NewVMWareDatastoreClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewVMWareDatastoreClientWithBaseURI creates an instance of the VMWareDatastoreClient client using a custom endpoint.
// Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewVMWareDatastoreClientWithBaseURI(baseURI string, subscriptionID string) VMWareDatastoreClient {
	return VMWareDatastoreClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Create sends the create request.
// Parameters:
// resourceGroupName - name of the resource group within the Azure subscription
// privateCloudName - name of the private cloud
// clusterName - name of the cluster in the private cloud
// vmwareDatastoreBackingName - name of the datastore backing (eg. remote NFS/iSCSI volumes) which is used for
// datastores in the private cloud
// vmwareDatastoreName - name of the VMWare datastore which serves as a container for storing VM files
func (client VMWareDatastoreClient) Create(ctx context.Context, resourceGroupName string, privateCloudName string, clusterName string, vmwareDatastoreBackingName string, vmwareDatastoreName string) (result VMWareDatastoreCreateFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/VMWareDatastoreClient.Create")
		defer func() {
			sc := -1
			if result.Response() != nil {
				sc = result.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreatePreparer(ctx, resourceGroupName, privateCloudName, clusterName, vmwareDatastoreBackingName, vmwareDatastoreName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "avs.VMWareDatastoreClient", "Create", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "avs.VMWareDatastoreClient", "Create", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreatePreparer prepares the Create request.
func (client VMWareDatastoreClient) CreatePreparer(ctx context.Context, resourceGroupName string, privateCloudName string, clusterName string, vmwareDatastoreBackingName string, vmwareDatastoreName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"clusterName":                autorest.Encode("path", clusterName),
		"privateCloudName":           autorest.Encode("path", privateCloudName),
		"resourceGroupName":          autorest.Encode("path", resourceGroupName),
		"subscriptionId":             autorest.Encode("path", client.SubscriptionID),
		"vmwareDatastoreBackingName": autorest.Encode("path", vmwareDatastoreBackingName),
		"vmwareDatastoreName":        autorest.Encode("path", vmwareDatastoreName),
	}

	const APIVersion = "2019-08-09-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/clusters/{clusterName}/vmwareDatastoreBackings/{vmwareDatastoreBackingName}/vmwareDatastores/{vmwareDatastoreName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateSender sends the Create request. The method will close the
// http.Response Body if it receives an error.
func (client VMWareDatastoreClient) CreateSender(req *http.Request) (future VMWareDatastoreCreateFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	future.Future, err = azure.NewFutureFromResponse(resp)
	return
}

// CreateResponder handles the response to the Create request. The method always
// closes the http.Response Body.
func (client VMWareDatastoreClient) CreateResponder(resp *http.Response) (result Resource, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
