package appplatform

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// CustomDomainsClient is the REST API for Azure Spring Cloud
type CustomDomainsClient struct {
	BaseClient
}

// NewCustomDomainsClient creates an instance of the CustomDomainsClient client.
func NewCustomDomainsClient(subscriptionID string) CustomDomainsClient {
	return NewCustomDomainsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewCustomDomainsClientWithBaseURI creates an instance of the CustomDomainsClient client using a custom endpoint.
// Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewCustomDomainsClientWithBaseURI(baseURI string, subscriptionID string) CustomDomainsClient {
	return CustomDomainsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// CreateOrUpdateAsync create or update custom domain of one lifecycle application.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource. You can obtain this value
// from the Azure Resource Manager API or the portal.
// serviceName - the name of the Service resource.
// appName - the name of the App resource.
func (client CustomDomainsClient) CreateOrUpdateAsync(ctx context.Context, domainName string, domainResource CustomDomainResource, resourceGroupName string, serviceName string, appName string) (result CustomDomainsCreateOrUpdateAsyncFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CustomDomainsClient.CreateOrUpdateAsync")
		defer func() {
			sc := -1
			if result.Response() != nil {
				sc = result.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: domainResource,
			Constraints: []validation.Constraint{{Target: "domainResource.Properties", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "domainResource.Properties.Name", Name: validation.Null, Rule: true, Chain: nil}}}}}}); err != nil {
		return result, validation.NewError("appplatform.CustomDomainsClient", "CreateOrUpdateAsync", err.Error())
	}

	req, err := client.CreateOrUpdateAsyncPreparer(ctx, domainName, domainResource, resourceGroupName, serviceName, appName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CustomDomainsClient", "CreateOrUpdateAsync", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOrUpdateAsyncSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CustomDomainsClient", "CreateOrUpdateAsync", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreateOrUpdateAsyncPreparer prepares the CreateOrUpdateAsync request.
func (client CustomDomainsClient) CreateOrUpdateAsyncPreparer(ctx context.Context, domainName string, domainResource CustomDomainResource, resourceGroupName string, serviceName string, appName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"appName":           autorest.Encode("path", appName),
		"DomainName":        autorest.Encode("path", domainName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"serviceName":       autorest.Encode("path", serviceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}", pathParameters),
		autorest.WithJSON(domainResource),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateAsyncSender sends the CreateOrUpdateAsync request. The method will close the
// http.Response Body if it receives an error.
func (client CustomDomainsClient) CreateOrUpdateAsyncSender(req *http.Request) (future CustomDomainsCreateOrUpdateAsyncFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	future.Future, err = azure.NewFutureFromResponse(resp)
	return
}

// CreateOrUpdateAsyncResponder handles the response to the CreateOrUpdateAsync request. The method always
// closes the http.Response Body.
func (client CustomDomainsClient) CreateOrUpdateAsyncResponder(resp *http.Response) (result CustomDomainResource, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteAsync delete the custom domain of one lifecycle application.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource. You can obtain this value
// from the Azure Resource Manager API or the portal.
// serviceName - the name of the Service resource.
// appName - the name of the App resource.
func (client CustomDomainsClient) DeleteAsync(ctx context.Context, domainName string, resourceGroupName string, serviceName string, appName string) (result CustomDomainResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CustomDomainsClient.DeleteAsync")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeleteAsyncPreparer(ctx, domainName, resourceGroupName, serviceName, appName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CustomDomainsClient", "DeleteAsync", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteAsyncSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "appplatform.CustomDomainsClient", "DeleteAsync", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteAsyncResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CustomDomainsClient", "DeleteAsync", resp, "Failure responding to request")
	}

	return
}

// DeleteAsyncPreparer prepares the DeleteAsync request.
func (client CustomDomainsClient) DeleteAsyncPreparer(ctx context.Context, domainName string, resourceGroupName string, serviceName string, appName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"appName":           autorest.Encode("path", appName),
		"DomainName":        autorest.Encode("path", domainName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"serviceName":       autorest.Encode("path", serviceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteAsyncSender sends the DeleteAsync request. The method will close the
// http.Response Body if it receives an error.
func (client CustomDomainsClient) DeleteAsyncSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteAsyncResponder handles the response to the DeleteAsync request. The method always
// closes the http.Response Body.
func (client CustomDomainsClient) DeleteAsyncResponder(resp *http.Response) (result CustomDomainResource, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAsync get the custom domain of one lifecycle application.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource. You can obtain this value
// from the Azure Resource Manager API or the portal.
// serviceName - the name of the Service resource.
// appName - the name of the App resource.
func (client CustomDomainsClient) GetAsync(ctx context.Context, domainName string, resourceGroupName string, serviceName string, appName string) (result CustomDomainResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CustomDomainsClient.GetAsync")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetAsyncPreparer(ctx, domainName, resourceGroupName, serviceName, appName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CustomDomainsClient", "GetAsync", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAsyncSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "appplatform.CustomDomainsClient", "GetAsync", resp, "Failure sending request")
		return
	}

	result, err = client.GetAsyncResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CustomDomainsClient", "GetAsync", resp, "Failure responding to request")
	}

	return
}

// GetAsyncPreparer prepares the GetAsync request.
func (client CustomDomainsClient) GetAsyncPreparer(ctx context.Context, domainName string, resourceGroupName string, serviceName string, appName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"appName":           autorest.Encode("path", appName),
		"DomainName":        autorest.Encode("path", domainName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"serviceName":       autorest.Encode("path", serviceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAsyncSender sends the GetAsync request. The method will close the
// http.Response Body if it receives an error.
func (client CustomDomainsClient) GetAsyncSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetAsyncResponder handles the response to the GetAsync request. The method always
// closes the http.Response Body.
func (client CustomDomainsClient) GetAsyncResponder(resp *http.Response) (result CustomDomainResource, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListAsync list the custom domains of one lifecycle application.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource. You can obtain this value
// from the Azure Resource Manager API or the portal.
// serviceName - the name of the Service resource.
// appName - the name of the App resource.
func (client CustomDomainsClient) ListAsync(ctx context.Context, domainName string, resourceGroupName string, serviceName string, appName string) (result CustomDomainResourceCollection, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CustomDomainsClient.ListAsync")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.ListAsyncPreparer(ctx, domainName, resourceGroupName, serviceName, appName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CustomDomainsClient", "ListAsync", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListAsyncSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "appplatform.CustomDomainsClient", "ListAsync", resp, "Failure sending request")
		return
	}

	result, err = client.ListAsyncResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CustomDomainsClient", "ListAsync", resp, "Failure responding to request")
	}

	return
}

// ListAsyncPreparer prepares the ListAsync request.
func (client CustomDomainsClient) ListAsyncPreparer(ctx context.Context, domainName string, resourceGroupName string, serviceName string, appName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"appName":           autorest.Encode("path", appName),
		"DomainName":        autorest.Encode("path", domainName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"serviceName":       autorest.Encode("path", serviceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListAsyncSender sends the ListAsync request. The method will close the
// http.Response Body if it receives an error.
func (client CustomDomainsClient) ListAsyncSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListAsyncResponder handles the response to the ListAsync request. The method always
// closes the http.Response Body.
func (client CustomDomainsClient) ListAsyncResponder(resp *http.Response) (result CustomDomainResourceCollection, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// PatchAsync update custom domain of one lifecycle application.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource. You can obtain this value
// from the Azure Resource Manager API or the portal.
// serviceName - the name of the Service resource.
// appName - the name of the App resource.
func (client CustomDomainsClient) PatchAsync(ctx context.Context, domainName string, domainResource CustomDomainResource, resourceGroupName string, serviceName string, appName string) (result CustomDomainResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CustomDomainsClient.PatchAsync")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.PatchAsyncPreparer(ctx, domainName, domainResource, resourceGroupName, serviceName, appName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CustomDomainsClient", "PatchAsync", nil, "Failure preparing request")
		return
	}

	resp, err := client.PatchAsyncSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "appplatform.CustomDomainsClient", "PatchAsync", resp, "Failure sending request")
		return
	}

	result, err = client.PatchAsyncResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CustomDomainsClient", "PatchAsync", resp, "Failure responding to request")
	}

	return
}

// PatchAsyncPreparer prepares the PatchAsync request.
func (client CustomDomainsClient) PatchAsyncPreparer(ctx context.Context, domainName string, domainResource CustomDomainResource, resourceGroupName string, serviceName string, appName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"appName":           autorest.Encode("path", appName),
		"DomainName":        autorest.Encode("path", domainName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"serviceName":       autorest.Encode("path", serviceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPatch(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/apps/{appName}/domains/{domainName}", pathParameters),
		autorest.WithJSON(domainResource),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// PatchAsyncSender sends the PatchAsync request. The method will close the
// http.Response Body if it receives an error.
func (client CustomDomainsClient) PatchAsyncSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// PatchAsyncResponder handles the response to the PatchAsync request. The method always
// closes the http.Response Body.
func (client CustomDomainsClient) PatchAsyncResponder(resp *http.Response) (result CustomDomainResource, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
