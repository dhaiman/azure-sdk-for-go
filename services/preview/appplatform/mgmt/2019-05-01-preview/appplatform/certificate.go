package appplatform

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/validation"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// CertificateClient is the REST API for Azure Spring Cloud
type CertificateClient struct {
	BaseClient
}

// NewCertificateClient creates an instance of the CertificateClient client.
func NewCertificateClient(subscriptionID string) CertificateClient {
	return NewCertificateClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewCertificateClientWithBaseURI creates an instance of the CertificateClient client using a custom endpoint.  Use
// this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewCertificateClientWithBaseURI(baseURI string, subscriptionID string) CertificateClient {
	return CertificateClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// CreateOrUpdateAsync create or update certificate resource.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource. You can obtain this value
// from the Azure Resource Manager API or the portal.
// serviceName - the name of the Service resource.
func (client CertificateClient) CreateOrUpdateAsync(ctx context.Context, certificateName string, certificateResource CertificateResource, resourceGroupName string, serviceName string) (result CertificateCreateOrUpdateAsyncFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CertificateClient.CreateOrUpdateAsync")
		defer func() {
			sc := -1
			if result.Response() != nil {
				sc = result.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: certificateName,
			Constraints: []validation.Constraint{{Target: "certificateName", Name: validation.Pattern, Rule: `^[a-z0-9-]{1,127}$`, Chain: nil}}},
		{TargetValue: certificateResource,
			Constraints: []validation.Constraint{{Target: "certificateResource.Properties", Name: validation.Null, Rule: false,
				Chain: []validation.Constraint{{Target: "certificateResource.Properties.KeyvaultCertificateName", Name: validation.Null, Rule: true, Chain: nil},
					{Target: "certificateResource.Properties.VaultURI", Name: validation.Null, Rule: true, Chain: nil},
				}}}}}); err != nil {
		return result, validation.NewError("appplatform.CertificateClient", "CreateOrUpdateAsync", err.Error())
	}

	req, err := client.CreateOrUpdateAsyncPreparer(ctx, certificateName, certificateResource, resourceGroupName, serviceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CertificateClient", "CreateOrUpdateAsync", nil, "Failure preparing request")
		return
	}

	result, err = client.CreateOrUpdateAsyncSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CertificateClient", "CreateOrUpdateAsync", result.Response(), "Failure sending request")
		return
	}

	return
}

// CreateOrUpdateAsyncPreparer prepares the CreateOrUpdateAsync request.
func (client CertificateClient) CreateOrUpdateAsyncPreparer(ctx context.Context, certificateName string, certificateResource CertificateResource, resourceGroupName string, serviceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"CertificateName":   autorest.Encode("path", certificateName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"serviceName":       autorest.Encode("path", serviceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}", pathParameters),
		autorest.WithJSON(certificateResource),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateAsyncSender sends the CreateOrUpdateAsync request. The method will close the
// http.Response Body if it receives an error.
func (client CertificateClient) CreateOrUpdateAsyncSender(req *http.Request) (future CertificateCreateOrUpdateAsyncFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	future.Future, err = azure.NewFutureFromResponse(resp)
	return
}

// CreateOrUpdateAsyncResponder handles the response to the CreateOrUpdateAsync request. The method always
// closes the http.Response Body.
func (client CertificateClient) CreateOrUpdateAsyncResponder(resp *http.Response) (result CertificateResource, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// DeleteAsync delete the certificate resource.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource. You can obtain this value
// from the Azure Resource Manager API or the portal.
// serviceName - the name of the Service resource.
func (client CertificateClient) DeleteAsync(ctx context.Context, certificateName string, resourceGroupName string, serviceName string) (result CertificateResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CertificateClient.DeleteAsync")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: certificateName,
			Constraints: []validation.Constraint{{Target: "certificateName", Name: validation.Pattern, Rule: `^[a-z0-9-]{1,127}$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("appplatform.CertificateClient", "DeleteAsync", err.Error())
	}

	req, err := client.DeleteAsyncPreparer(ctx, certificateName, resourceGroupName, serviceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CertificateClient", "DeleteAsync", nil, "Failure preparing request")
		return
	}

	resp, err := client.DeleteAsyncSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "appplatform.CertificateClient", "DeleteAsync", resp, "Failure sending request")
		return
	}

	result, err = client.DeleteAsyncResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CertificateClient", "DeleteAsync", resp, "Failure responding to request")
	}

	return
}

// DeleteAsyncPreparer prepares the DeleteAsync request.
func (client CertificateClient) DeleteAsyncPreparer(ctx context.Context, certificateName string, resourceGroupName string, serviceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"CertificateName":   autorest.Encode("path", certificateName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"serviceName":       autorest.Encode("path", serviceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteAsyncSender sends the DeleteAsync request. The method will close the
// http.Response Body if it receives an error.
func (client CertificateClient) DeleteAsyncSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// DeleteAsyncResponder handles the response to the DeleteAsync request. The method always
// closes the http.Response Body.
func (client CertificateClient) DeleteAsyncResponder(resp *http.Response) (result CertificateResource, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusNoContent),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetAsync get the certificate resource.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource. You can obtain this value
// from the Azure Resource Manager API or the portal.
// serviceName - the name of the Service resource.
func (client CertificateClient) GetAsync(ctx context.Context, certificateName string, resourceGroupName string, serviceName string) (result CertificateResource, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CertificateClient.GetAsync")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: certificateName,
			Constraints: []validation.Constraint{{Target: "certificateName", Name: validation.Pattern, Rule: `^[a-z0-9-]{1,127}$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("appplatform.CertificateClient", "GetAsync", err.Error())
	}

	req, err := client.GetAsyncPreparer(ctx, certificateName, resourceGroupName, serviceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CertificateClient", "GetAsync", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetAsyncSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "appplatform.CertificateClient", "GetAsync", resp, "Failure sending request")
		return
	}

	result, err = client.GetAsyncResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CertificateClient", "GetAsync", resp, "Failure responding to request")
	}

	return
}

// GetAsyncPreparer prepares the GetAsync request.
func (client CertificateClient) GetAsyncPreparer(ctx context.Context, certificateName string, resourceGroupName string, serviceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"CertificateName":   autorest.Encode("path", certificateName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"serviceName":       autorest.Encode("path", serviceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates/{certificateName}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetAsyncSender sends the GetAsync request. The method will close the
// http.Response Body if it receives an error.
func (client CertificateClient) GetAsyncSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetAsyncResponder handles the response to the GetAsync request. The method always
// closes the http.Response Body.
func (client CertificateClient) GetAsyncResponder(resp *http.Response) (result CertificateResource, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListAsync list all the certificates of one user.
// Parameters:
// resourceGroupName - the name of the resource group that contains the resource. You can obtain this value
// from the Azure Resource Manager API or the portal.
// serviceName - the name of the Service resource.
func (client CertificateClient) ListAsync(ctx context.Context, certificateName string, resourceGroupName string, serviceName string) (result CertificateResourceCollection, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/CertificateClient.ListAsync")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	if err := validation.Validate([]validation.Validation{
		{TargetValue: certificateName,
			Constraints: []validation.Constraint{{Target: "certificateName", Name: validation.Pattern, Rule: `^[a-z0-9-]{1,127}$`, Chain: nil}}}}); err != nil {
		return result, validation.NewError("appplatform.CertificateClient", "ListAsync", err.Error())
	}

	req, err := client.ListAsyncPreparer(ctx, certificateName, resourceGroupName, serviceName)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CertificateClient", "ListAsync", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListAsyncSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "appplatform.CertificateClient", "ListAsync", resp, "Failure sending request")
		return
	}

	result, err = client.ListAsyncResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "appplatform.CertificateClient", "ListAsync", resp, "Failure responding to request")
	}

	return
}

// ListAsyncPreparer prepares the ListAsync request.
func (client CertificateClient) ListAsyncPreparer(ctx context.Context, certificateName string, resourceGroupName string, serviceName string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"CertificateName":   autorest.Encode("path", certificateName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"serviceName":       autorest.Encode("path", serviceName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
	}

	const APIVersion = "2019-05-01-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppPlatform/Spring/{serviceName}/certificates", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListAsyncSender sends the ListAsync request. The method will close the
// http.Response Body if it receives an error.
func (client CertificateClient) ListAsyncSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListAsyncResponder handles the response to the ListAsync request. The method always
// closes the http.Response Body.
func (client CertificateClient) ListAsyncResponder(resp *http.Response) (result CertificateResourceCollection, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
