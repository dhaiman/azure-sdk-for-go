package workloadmonitor

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/autorest/date"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// MonitorStateChangesClient is the workload Monitor API
type MonitorStateChangesClient struct {
	BaseClient
}

// NewMonitorStateChangesClient creates an instance of the MonitorStateChangesClient client.
func NewMonitorStateChangesClient() MonitorStateChangesClient {
	return NewMonitorStateChangesClientWithBaseURI(DefaultBaseURI)
}

// NewMonitorStateChangesClientWithBaseURI creates an instance of the MonitorStateChangesClient client using a custom
// endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure
// stack).
func NewMonitorStateChangesClientWithBaseURI(baseURI string) MonitorStateChangesClient {
	return MonitorStateChangesClient{NewWithBaseURI(baseURI)}
}

// List sends the list request.
// Parameters:
// subscriptionID - the subscriptionId of the resource
// resourceGroupName - the resourceGroupName of the resource
// resourceNamespace - the resourceNamespace of the resource
// resourceType - the resourceType of the resource
// resourceName - the resourceType of the resource
// monitorID - the monitorId of the resource (url encoded)
// filter - list example: $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb'; history example:
// $filter=isHeartbeat eq false
// expand - ex: $expand=evidence,configuration
// startTimestampUtc - the start Timestamp for the desired history
// endTimestampUtc - the end Timestamp for the desired history
func (client MonitorStateChangesClient) List(ctx context.Context, subscriptionID string, resourceGroupName string, resourceNamespace string, resourceType string, resourceName string, monitorID string, filter string, expand string, startTimestampUtc *date.Time, endTimestampUtc *date.Time) (result MonitorStateChangeListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MonitorStateChangesClient.List")
		defer func() {
			sc := -1
			if result.mscl.Response.Response != nil {
				sc = result.mscl.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listNextResults
	req, err := client.ListPreparer(ctx, subscriptionID, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorID, filter, expand, startTimestampUtc, endTimestampUtc)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorStateChangesClient", "List", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListSender(req)
	if err != nil {
		result.mscl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorStateChangesClient", "List", resp, "Failure sending request")
		return
	}

	result.mscl, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorStateChangesClient", "List", resp, "Failure responding to request")
	}
	if result.mscl.hasNextLink() && result.mscl.IsEmpty() {
		err = result.NextWithContext(ctx)
	}

	return
}

// ListPreparer prepares the List request.
func (client MonitorStateChangesClient) ListPreparer(ctx context.Context, subscriptionID string, resourceGroupName string, resourceNamespace string, resourceType string, resourceName string, monitorID string, filter string, expand string, startTimestampUtc *date.Time, endTimestampUtc *date.Time) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"monitorId":         autorest.Encode("path", monitorID),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"resourceName":      autorest.Encode("path", resourceName),
		"resourceNamespace": autorest.Encode("path", resourceNamespace),
		"resourceType":      autorest.Encode("path", resourceType),
		"subscriptionId":    autorest.Encode("path", subscriptionID),
	}

	const APIVersion = "2020-01-13-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = autorest.Encode("query", filter)
	}
	if len(expand) > 0 {
		queryParameters["$expand"] = autorest.Encode("query", expand)
	}
	if startTimestampUtc != nil {
		queryParameters["startTimestampUtc"] = autorest.Encode("query", *startTimestampUtc)
	}
	if endTimestampUtc != nil {
		queryParameters["endTimestampUtc"] = autorest.Encode("query", *endTimestampUtc)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}/history", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListSender sends the List request. The method will close the
// http.Response Body if it receives an error.
func (client MonitorStateChangesClient) ListSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListResponder handles the response to the List request. The method always
// closes the http.Response Body.
func (client MonitorStateChangesClient) ListResponder(resp *http.Response) (result MonitorStateChangeList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listNextResults retrieves the next set of results, if any.
func (client MonitorStateChangesClient) listNextResults(ctx context.Context, lastResults MonitorStateChangeList) (result MonitorStateChangeList, err error) {
	req, err := lastResults.monitorStateChangeListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "workloadmonitor.MonitorStateChangesClient", "listNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "workloadmonitor.MonitorStateChangesClient", "listNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "workloadmonitor.MonitorStateChangesClient", "listNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListComplete enumerates all values, automatically crossing page boundaries as required.
func (client MonitorStateChangesClient) ListComplete(ctx context.Context, subscriptionID string, resourceGroupName string, resourceNamespace string, resourceType string, resourceName string, monitorID string, filter string, expand string, startTimestampUtc *date.Time, endTimestampUtc *date.Time) (result MonitorStateChangeListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/MonitorStateChangesClient.List")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.List(ctx, subscriptionID, resourceGroupName, resourceNamespace, resourceType, resourceName, monitorID, filter, expand, startTimestampUtc, endTimestampUtc)
	return
}
