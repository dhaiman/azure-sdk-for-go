package datacollaboration

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// ContractStatus enumerates the values for contract status.
type ContractStatus string

const (
	// Active ...
	Active ContractStatus = "Active"
	// Draft ...
	Draft ContractStatus = "Draft"
)

// PossibleContractStatusValues returns an array of possible values for the ContractStatus const type.
func PossibleContractStatusValues() []ContractStatus {
	return []ContractStatus{Active, Draft}
}

// CreatedByType enumerates the values for created by type.
type CreatedByType string

const (
	// Application ...
	Application CreatedByType = "Application"
	// Key ...
	Key CreatedByType = "Key"
	// ManagedIdentity ...
	ManagedIdentity CreatedByType = "ManagedIdentity"
	// User ...
	User CreatedByType = "User"
)

// PossibleCreatedByTypeValues returns an array of possible values for the CreatedByType const type.
func PossibleCreatedByTypeValues() []CreatedByType {
	return []CreatedByType{Application, Key, ManagedIdentity, User}
}

// DataProcessingStrategy enumerates the values for data processing strategy.
type DataProcessingStrategy string

const (
	// CopyBased ...
	CopyBased DataProcessingStrategy = "CopyBased"
	// InPlace ...
	InPlace DataProcessingStrategy = "InPlace"
)

// PossibleDataProcessingStrategyValues returns an array of possible values for the DataProcessingStrategy const type.
func PossibleDataProcessingStrategyValues() []DataProcessingStrategy {
	return []DataProcessingStrategy{CopyBased, InPlace}
}

// InvitationStatus enumerates the values for invitation status.
type InvitationStatus string

const (
	// Accepted ...
	Accepted InvitationStatus = "Accepted"
	// Pending ...
	Pending InvitationStatus = "Pending"
	// Rejected ...
	Rejected InvitationStatus = "Rejected"
)

// PossibleInvitationStatusValues returns an array of possible values for the InvitationStatus const type.
func PossibleInvitationStatusValues() []InvitationStatus {
	return []InvitationStatus{Accepted, Pending, Rejected}
}

// Kind enumerates the values for kind.
type Kind string

const (
	// KindConstraint ...
	KindConstraint Kind = "Constraint"
	// KindLocation ...
	KindLocation Kind = "Location"
	// KindScript ...
	KindScript Kind = "Script"
)

// PossibleKindValues returns an array of possible values for the Kind const type.
func PossibleKindValues() []Kind {
	return []Kind{KindConstraint, KindLocation, KindScript}
}

// KindBasicDataSet enumerates the values for kind basic data set.
type KindBasicDataSet string

const (
	// KindAdlsGen2File ...
	KindAdlsGen2File KindBasicDataSet = "AdlsGen2File"
	// KindAdlsGen2FileSystem ...
	KindAdlsGen2FileSystem KindBasicDataSet = "AdlsGen2FileSystem"
	// KindAdlsGen2Folder ...
	KindAdlsGen2Folder KindBasicDataSet = "AdlsGen2Folder"
	// KindBlob ...
	KindBlob KindBasicDataSet = "Blob"
	// KindBlobFolder ...
	KindBlobFolder KindBasicDataSet = "BlobFolder"
	// KindContainer ...
	KindContainer KindBasicDataSet = "Container"
	// KindDataSet ...
	KindDataSet KindBasicDataSet = "DataSet"
)

// PossibleKindBasicDataSetValues returns an array of possible values for the KindBasicDataSet const type.
func PossibleKindBasicDataSetValues() []KindBasicDataSet {
	return []KindBasicDataSet{KindAdlsGen2File, KindAdlsGen2FileSystem, KindAdlsGen2Folder, KindBlob, KindBlobFolder, KindContainer, KindDataSet}
}

// KindBasicPipelineStep enumerates the values for kind basic pipeline step.
type KindBasicPipelineStep string

const (
	// KindPipelineStep ...
	KindPipelineStep KindBasicPipelineStep = "PipelineStep"
	// KindSynapseSpark ...
	KindSynapseSpark KindBasicPipelineStep = "SynapseSpark"
)

// PossibleKindBasicPipelineStepValues returns an array of possible values for the KindBasicPipelineStep const type.
func PossibleKindBasicPipelineStepValues() []KindBasicPipelineStep {
	return []KindBasicPipelineStep{KindPipelineStep, KindSynapseSpark}
}

// KindBasicPolicy enumerates the values for kind basic policy.
type KindBasicPolicy string

const (
	// KindDiagnosticLevel ...
	KindDiagnosticLevel KindBasicPolicy = "DiagnosticLevel"
	// KindPolicy ...
	KindPolicy KindBasicPolicy = "Policy"
)

// PossibleKindBasicPolicyValues returns an array of possible values for the KindBasicPolicy const type.
func PossibleKindBasicPolicyValues() []KindBasicPolicy {
	return []KindBasicPolicy{KindDiagnosticLevel, KindPolicy}
}

// KindBasicScript enumerates the values for kind basic script.
type KindBasicScript string

const (
	// KindBasicScriptKindScript ...
	KindBasicScriptKindScript KindBasicScript = "Script"
	// KindBasicScriptKindSynapseSpark ...
	KindBasicScriptKindSynapseSpark KindBasicScript = "SynapseSpark"
)

// PossibleKindBasicScriptValues returns an array of possible values for the KindBasicScript const type.
func PossibleKindBasicScriptValues() []KindBasicScript {
	return []KindBasicScript{KindBasicScriptKindScript, KindBasicScriptKindSynapseSpark}
}

// LastModifiedByType enumerates the values for last modified by type.
type LastModifiedByType string

const (
	// LastModifiedByTypeApplication ...
	LastModifiedByTypeApplication LastModifiedByType = "Application"
	// LastModifiedByTypeKey ...
	LastModifiedByTypeKey LastModifiedByType = "Key"
	// LastModifiedByTypeManagedIdentity ...
	LastModifiedByTypeManagedIdentity LastModifiedByType = "ManagedIdentity"
	// LastModifiedByTypeUser ...
	LastModifiedByTypeUser LastModifiedByType = "User"
)

// PossibleLastModifiedByTypeValues returns an array of possible values for the LastModifiedByType const type.
func PossibleLastModifiedByTypeValues() []LastModifiedByType {
	return []LastModifiedByType{LastModifiedByTypeApplication, LastModifiedByTypeKey, LastModifiedByTypeManagedIdentity, LastModifiedByTypeUser}
}

// LogLevel enumerates the values for log level.
type LogLevel string

const (
	// LogLevelCritical ...
	LogLevelCritical LogLevel = "Critical"
	// LogLevelError ...
	LogLevelError LogLevel = "Error"
	// LogLevelInformation ...
	LogLevelInformation LogLevel = "Information"
	// LogLevelVerbose ...
	LogLevelVerbose LogLevel = "Verbose"
	// LogLevelWarning ...
	LogLevelWarning LogLevel = "Warning"
)

// PossibleLogLevelValues returns an array of possible values for the LogLevel const type.
func PossibleLogLevelValues() []LogLevel {
	return []LogLevel{LogLevelCritical, LogLevelError, LogLevelInformation, LogLevelVerbose, LogLevelWarning}
}

// PipelineRunStatus enumerates the values for pipeline run status.
type PipelineRunStatus string

const (
	// Canceling ...
	Canceling PipelineRunStatus = "Canceling"
	// Cancelled ...
	Cancelled PipelineRunStatus = "Cancelled"
	// Failed ...
	Failed PipelineRunStatus = "Failed"
	// InProgress ...
	InProgress PipelineRunStatus = "InProgress"
	// Queued ...
	Queued PipelineRunStatus = "Queued"
	// Succeeded ...
	Succeeded PipelineRunStatus = "Succeeded"
)

// PossiblePipelineRunStatusValues returns an array of possible values for the PipelineRunStatus const type.
func PossiblePipelineRunStatusValues() []PipelineRunStatus {
	return []PipelineRunStatus{Canceling, Cancelled, Failed, InProgress, Queued, Succeeded}
}

// PipelineStepRunStatus enumerates the values for pipeline step run status.
type PipelineStepRunStatus string

const (
	// PipelineStepRunStatusCanceling ...
	PipelineStepRunStatusCanceling PipelineStepRunStatus = "Canceling"
	// PipelineStepRunStatusCancelled ...
	PipelineStepRunStatusCancelled PipelineStepRunStatus = "Cancelled"
	// PipelineStepRunStatusFailed ...
	PipelineStepRunStatusFailed PipelineStepRunStatus = "Failed"
	// PipelineStepRunStatusInProgress ...
	PipelineStepRunStatusInProgress PipelineStepRunStatus = "InProgress"
	// PipelineStepRunStatusQueued ...
	PipelineStepRunStatusQueued PipelineStepRunStatus = "Queued"
	// PipelineStepRunStatusSucceeded ...
	PipelineStepRunStatusSucceeded PipelineStepRunStatus = "Succeeded"
)

// PossiblePipelineStepRunStatusValues returns an array of possible values for the PipelineStepRunStatus const type.
func PossiblePipelineStepRunStatusValues() []PipelineStepRunStatus {
	return []PipelineStepRunStatus{PipelineStepRunStatusCanceling, PipelineStepRunStatusCancelled, PipelineStepRunStatusFailed, PipelineStepRunStatusInProgress, PipelineStepRunStatusQueued, PipelineStepRunStatusSucceeded}
}

// ProposalApprovalStatus enumerates the values for proposal approval status.
type ProposalApprovalStatus string

const (
	// ProposalApprovalStatusApproved ...
	ProposalApprovalStatusApproved ProposalApprovalStatus = "Approved"
	// ProposalApprovalStatusExpired ...
	ProposalApprovalStatusExpired ProposalApprovalStatus = "Expired"
	// ProposalApprovalStatusPending ...
	ProposalApprovalStatusPending ProposalApprovalStatus = "Pending"
)

// PossibleProposalApprovalStatusValues returns an array of possible values for the ProposalApprovalStatus const type.
func PossibleProposalApprovalStatusValues() []ProposalApprovalStatus {
	return []ProposalApprovalStatus{ProposalApprovalStatusApproved, ProposalApprovalStatusExpired, ProposalApprovalStatusPending}
}

// ProvisioningState enumerates the values for provisioning state.
type ProvisioningState string

const (
	// ProvisioningStateCreating ...
	ProvisioningStateCreating ProvisioningState = "Creating"
	// ProvisioningStateDeleting ...
	ProvisioningStateDeleting ProvisioningState = "Deleting"
	// ProvisioningStateFailed ...
	ProvisioningStateFailed ProvisioningState = "Failed"
	// ProvisioningStateMoving ...
	ProvisioningStateMoving ProvisioningState = "Moving"
	// ProvisioningStateSucceeded ...
	ProvisioningStateSucceeded ProvisioningState = "Succeeded"
	// ProvisioningStateUpdating ...
	ProvisioningStateUpdating ProvisioningState = "Updating"
)

// PossibleProvisioningStateValues returns an array of possible values for the ProvisioningState const type.
func PossibleProvisioningStateValues() []ProvisioningState {
	return []ProvisioningState{ProvisioningStateCreating, ProvisioningStateDeleting, ProvisioningStateFailed, ProvisioningStateMoving, ProvisioningStateSucceeded, ProvisioningStateUpdating}
}

// ResourceType enumerates the values for resource type.
type ResourceType string

const (
	// ResourceTypeDataAssetReference ...
	ResourceTypeDataAssetReference ResourceType = "DataAssetReference"
	// ResourceTypeScriptReference ...
	ResourceTypeScriptReference ResourceType = "ScriptReference"
)

// PossibleResourceTypeValues returns an array of possible values for the ResourceType const type.
func PossibleResourceTypeValues() []ResourceType {
	return []ResourceType{ResourceTypeDataAssetReference, ResourceTypeScriptReference}
}

// ScriptKind enumerates the values for script kind.
type ScriptKind string

const (
	// SynapseSpark ...
	SynapseSpark ScriptKind = "SynapseSpark"
)

// PossibleScriptKindValues returns an array of possible values for the ScriptKind const type.
func PossibleScriptKindValues() []ScriptKind {
	return []ScriptKind{SynapseSpark}
}

// ScriptVisibility enumerates the values for script visibility.
type ScriptVisibility string

const (
	// HiddenContent ...
	HiddenContent ScriptVisibility = "HiddenContent"
	// ShowAll ...
	ShowAll ScriptVisibility = "ShowAll"
)

// PossibleScriptVisibilityValues returns an array of possible values for the ScriptVisibility const type.
func PossibleScriptVisibilityValues() []ScriptVisibility {
	return []ScriptVisibility{HiddenContent, ShowAll}
}

// Status enumerates the values for status.
type Status string

const (
	// StatusAccepted ...
	StatusAccepted Status = "Accepted"
	// StatusCanceled ...
	StatusCanceled Status = "Canceled"
	// StatusFailed ...
	StatusFailed Status = "Failed"
	// StatusInProgress ...
	StatusInProgress Status = "InProgress"
	// StatusSucceeded ...
	StatusSucceeded Status = "Succeeded"
	// StatusTransientFailure ...
	StatusTransientFailure Status = "TransientFailure"
)

// PossibleStatusValues returns an array of possible values for the Status const type.
func PossibleStatusValues() []Status {
	return []Status{StatusAccepted, StatusCanceled, StatusFailed, StatusInProgress, StatusSucceeded, StatusTransientFailure}
}

// Type enumerates the values for type.
type Type string

const (
	// SystemAssigned ...
	SystemAssigned Type = "SystemAssigned"
)

// PossibleTypeValues returns an array of possible values for the Type const type.
func PossibleTypeValues() []Type {
	return []Type{SystemAssigned}
}

// Visibility enumerates the values for visibility.
type Visibility string

const (
	// VisibilityHiddenContent ...
	VisibilityHiddenContent Visibility = "HiddenContent"
	// VisibilityShowAll ...
	VisibilityShowAll Visibility = "ShowAll"
)

// PossibleVisibilityValues returns an array of possible values for the Visibility const type.
func PossibleVisibilityValues() []Visibility {
	return []Visibility{VisibilityHiddenContent, VisibilityShowAll}
}
