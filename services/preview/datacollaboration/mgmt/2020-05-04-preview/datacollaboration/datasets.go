package datacollaboration

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// DataSetsClient is the creates a Microsoft.DataCollaboration management client.
type DataSetsClient struct {
	BaseClient
}

// NewDataSetsClient creates an instance of the DataSetsClient client.
func NewDataSetsClient(subscriptionID string) DataSetsClient {
	return NewDataSetsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewDataSetsClientWithBaseURI creates an instance of the DataSetsClient client using a custom endpoint.  Use this
// when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewDataSetsClientWithBaseURI(baseURI string, subscriptionID string) DataSetsClient {
	return DataSetsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// CreateOrUpdate create or update a DataSet
// Parameters:
// resourceGroupName - the resource group name.
// workspaceName - the name of the workspace.
// dataAssetName - the name of the DataAsset
// dataSetCategory - the usage category name of the DataSet
// dataSet - the new DataSet information.
func (client DataSetsClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, workspaceName string, dataAssetName string, dataSetCategory string, dataSet BasicDataSet) (result DataSetModel, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DataSetsClient.CreateOrUpdate")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.CreateOrUpdatePreparer(ctx, resourceGroupName, workspaceName, dataAssetName, dataSetCategory, dataSet)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.DataSetsClient", "CreateOrUpdate", nil, "Failure preparing request")
		return
	}

	resp, err := client.CreateOrUpdateSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "datacollaboration.DataSetsClient", "CreateOrUpdate", resp, "Failure sending request")
		return
	}

	result, err = client.CreateOrUpdateResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.DataSetsClient", "CreateOrUpdate", resp, "Failure responding to request")
	}

	return
}

// CreateOrUpdatePreparer prepares the CreateOrUpdate request.
func (client DataSetsClient) CreateOrUpdatePreparer(ctx context.Context, resourceGroupName string, workspaceName string, dataAssetName string, dataSetCategory string, dataSet BasicDataSet) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"dataAssetName":     autorest.Encode("path", dataAssetName),
		"dataSetCategory":   autorest.Encode("path", dataSetCategory),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	const APIVersion = "2020-05-04-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsContentType("application/json; charset=utf-8"),
		autorest.AsPut(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCollaboration/workspaces/{workspaceName}/dataAssets/{dataAssetName}/dataSets/{dataSetCategory}", pathParameters),
		autorest.WithJSON(dataSet),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// CreateOrUpdateSender sends the CreateOrUpdate request. The method will close the
// http.Response Body if it receives an error.
func (client DataSetsClient) CreateOrUpdateSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// CreateOrUpdateResponder handles the response to the CreateOrUpdate request. The method always
// closes the http.Response Body.
func (client DataSetsClient) CreateOrUpdateResponder(resp *http.Response) (result DataSetModel, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusCreated),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Delete delete a DataSet in a DataAsset
// Parameters:
// resourceGroupName - the resource group name.
// workspaceName - the name of the workspace.
// dataAssetName - the name of the DataAsset
// dataSetCategory - the usage category name of the DataSet
func (client DataSetsClient) Delete(ctx context.Context, resourceGroupName string, workspaceName string, dataAssetName string, dataSetCategory string) (result DataSetsDeleteFuture, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DataSetsClient.Delete")
		defer func() {
			sc := -1
			if result.Response() != nil {
				sc = result.Response().StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.DeletePreparer(ctx, resourceGroupName, workspaceName, dataAssetName, dataSetCategory)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.DataSetsClient", "Delete", nil, "Failure preparing request")
		return
	}

	result, err = client.DeleteSender(req)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.DataSetsClient", "Delete", result.Response(), "Failure sending request")
		return
	}

	return
}

// DeletePreparer prepares the Delete request.
func (client DataSetsClient) DeletePreparer(ctx context.Context, resourceGroupName string, workspaceName string, dataAssetName string, dataSetCategory string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"dataAssetName":     autorest.Encode("path", dataAssetName),
		"dataSetCategory":   autorest.Encode("path", dataSetCategory),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	const APIVersion = "2020-05-04-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsDelete(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCollaboration/workspaces/{workspaceName}/dataAssets/{dataAssetName}/dataSets/{dataSetCategory}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// DeleteSender sends the Delete request. The method will close the
// http.Response Body if it receives an error.
func (client DataSetsClient) DeleteSender(req *http.Request) (future DataSetsDeleteFuture, err error) {
	var resp *http.Response
	resp, err = client.Send(req, azure.DoRetryWithRegistration(client.Client))
	if err != nil {
		return
	}
	future.Future, err = azure.NewFutureFromResponse(resp)
	return
}

// DeleteResponder handles the response to the Delete request. The method always
// closes the http.Response Body.
func (client DataSetsClient) DeleteResponder(resp *http.Response) (result OperationResponse, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK, http.StatusAccepted, http.StatusNoContent),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// Get get a DataSet in a DataAsset
// Parameters:
// resourceGroupName - the resource group name.
// workspaceName - the name of the workspace.
// dataAssetName - the name of the DataAsset
// dataSetCategory - the usage category name of the DataSet
func (client DataSetsClient) Get(ctx context.Context, resourceGroupName string, workspaceName string, dataAssetName string, dataSetCategory string) (result DataSetModel, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DataSetsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, resourceGroupName, workspaceName, dataAssetName, dataSetCategory)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.DataSetsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "datacollaboration.DataSetsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.DataSetsClient", "Get", resp, "Failure responding to request")
	}

	return
}

// GetPreparer prepares the Get request.
func (client DataSetsClient) GetPreparer(ctx context.Context, resourceGroupName string, workspaceName string, dataAssetName string, dataSetCategory string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"dataAssetName":     autorest.Encode("path", dataAssetName),
		"dataSetCategory":   autorest.Encode("path", dataSetCategory),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	const APIVersion = "2020-05-04-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCollaboration/workspaces/{workspaceName}/dataAssets/{dataAssetName}/dataSets/{dataSetCategory}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client DataSetsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client DataSetsClient) GetResponder(resp *http.Response) (result DataSetModel, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByDataAsset list DataSets in a DataAsset
// Parameters:
// resourceGroupName - the resource group name.
// workspaceName - the name of the workspace.
// dataAssetName - the name of the DataAsset
// skipToken - continuation token
func (client DataSetsClient) ListByDataAsset(ctx context.Context, resourceGroupName string, workspaceName string, dataAssetName string, skipToken string) (result DataSetListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DataSetsClient.ListByDataAsset")
		defer func() {
			sc := -1
			if result.dsl.Response.Response != nil {
				sc = result.dsl.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByDataAssetNextResults
	req, err := client.ListByDataAssetPreparer(ctx, resourceGroupName, workspaceName, dataAssetName, skipToken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.DataSetsClient", "ListByDataAsset", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByDataAssetSender(req)
	if err != nil {
		result.dsl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "datacollaboration.DataSetsClient", "ListByDataAsset", resp, "Failure sending request")
		return
	}

	result.dsl, err = client.ListByDataAssetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.DataSetsClient", "ListByDataAsset", resp, "Failure responding to request")
	}
	if result.dsl.hasNextLink() && result.dsl.IsEmpty() {
		err = result.NextWithContext(ctx)
	}

	return
}

// ListByDataAssetPreparer prepares the ListByDataAsset request.
func (client DataSetsClient) ListByDataAssetPreparer(ctx context.Context, resourceGroupName string, workspaceName string, dataAssetName string, skipToken string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"dataAssetName":     autorest.Encode("path", dataAssetName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	const APIVersion = "2020-05-04-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(skipToken) > 0 {
		queryParameters["$skipToken"] = autorest.Encode("query", skipToken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCollaboration/workspaces/{workspaceName}/dataAssets/{dataAssetName}/dataSets", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByDataAssetSender sends the ListByDataAsset request. The method will close the
// http.Response Body if it receives an error.
func (client DataSetsClient) ListByDataAssetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByDataAssetResponder handles the response to the ListByDataAsset request. The method always
// closes the http.Response Body.
func (client DataSetsClient) ListByDataAssetResponder(resp *http.Response) (result DataSetList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByDataAssetNextResults retrieves the next set of results, if any.
func (client DataSetsClient) listByDataAssetNextResults(ctx context.Context, lastResults DataSetList) (result DataSetList, err error) {
	req, err := lastResults.dataSetListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "datacollaboration.DataSetsClient", "listByDataAssetNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByDataAssetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "datacollaboration.DataSetsClient", "listByDataAssetNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByDataAssetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.DataSetsClient", "listByDataAssetNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByDataAssetComplete enumerates all values, automatically crossing page boundaries as required.
func (client DataSetsClient) ListByDataAssetComplete(ctx context.Context, resourceGroupName string, workspaceName string, dataAssetName string, skipToken string) (result DataSetListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/DataSetsClient.ListByDataAsset")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByDataAsset(ctx, resourceGroupName, workspaceName, dataAssetName, skipToken)
	return
}
