package datacollaboration

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// ScriptRevisionsClient is the creates a Microsoft.DataCollaboration management client.
type ScriptRevisionsClient struct {
	BaseClient
}

// NewScriptRevisionsClient creates an instance of the ScriptRevisionsClient client.
func NewScriptRevisionsClient(subscriptionID string) ScriptRevisionsClient {
	return NewScriptRevisionsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewScriptRevisionsClientWithBaseURI creates an instance of the ScriptRevisionsClient client using a custom endpoint.
// Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure stack).
func NewScriptRevisionsClientWithBaseURI(baseURI string, subscriptionID string) ScriptRevisionsClient {
	return ScriptRevisionsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Get get a Script's revision in a Workspace
// Parameters:
// resourceGroupName - the resource group name.
// workspaceName - the name of the workspace.
// scriptName - the name of the script.
// revision - the revision of the script.
func (client ScriptRevisionsClient) Get(ctx context.Context, resourceGroupName string, workspaceName string, scriptName string, revision int32) (result ScriptModel, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ScriptRevisionsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, resourceGroupName, workspaceName, scriptName, revision)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.ScriptRevisionsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "datacollaboration.ScriptRevisionsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.ScriptRevisionsClient", "Get", resp, "Failure responding to request")
	}

	return
}

// GetPreparer prepares the Get request.
func (client ScriptRevisionsClient) GetPreparer(ctx context.Context, resourceGroupName string, workspaceName string, scriptName string, revision int32) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"revision":          autorest.Encode("path", revision),
		"scriptName":        autorest.Encode("path", scriptName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	const APIVersion = "2020-05-04-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCollaboration/workspaces/{workspaceName}/scripts/{scriptName}/scriptRevisions/{revision}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client ScriptRevisionsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client ScriptRevisionsClient) GetResponder(resp *http.Response) (result ScriptModel, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByScript list revisions of a Script
// Parameters:
// resourceGroupName - the resource group name.
// workspaceName - the name of the workspace.
// scriptName - the name of the script.
// skipToken - continuation token
func (client ScriptRevisionsClient) ListByScript(ctx context.Context, resourceGroupName string, workspaceName string, scriptName string, skipToken string) (result ScriptListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ScriptRevisionsClient.ListByScript")
		defer func() {
			sc := -1
			if result.sl.Response.Response != nil {
				sc = result.sl.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByScriptNextResults
	req, err := client.ListByScriptPreparer(ctx, resourceGroupName, workspaceName, scriptName, skipToken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.ScriptRevisionsClient", "ListByScript", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByScriptSender(req)
	if err != nil {
		result.sl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "datacollaboration.ScriptRevisionsClient", "ListByScript", resp, "Failure sending request")
		return
	}

	result.sl, err = client.ListByScriptResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.ScriptRevisionsClient", "ListByScript", resp, "Failure responding to request")
	}
	if result.sl.hasNextLink() && result.sl.IsEmpty() {
		err = result.NextWithContext(ctx)
	}

	return
}

// ListByScriptPreparer prepares the ListByScript request.
func (client ScriptRevisionsClient) ListByScriptPreparer(ctx context.Context, resourceGroupName string, workspaceName string, scriptName string, skipToken string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"scriptName":        autorest.Encode("path", scriptName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	const APIVersion = "2020-05-04-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(skipToken) > 0 {
		queryParameters["$skipToken"] = autorest.Encode("query", skipToken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCollaboration/workspaces/{workspaceName}/scripts/{scriptName}/scriptRevisions", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByScriptSender sends the ListByScript request. The method will close the
// http.Response Body if it receives an error.
func (client ScriptRevisionsClient) ListByScriptSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByScriptResponder handles the response to the ListByScript request. The method always
// closes the http.Response Body.
func (client ScriptRevisionsClient) ListByScriptResponder(resp *http.Response) (result ScriptList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByScriptNextResults retrieves the next set of results, if any.
func (client ScriptRevisionsClient) listByScriptNextResults(ctx context.Context, lastResults ScriptList) (result ScriptList, err error) {
	req, err := lastResults.scriptListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "datacollaboration.ScriptRevisionsClient", "listByScriptNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByScriptSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "datacollaboration.ScriptRevisionsClient", "listByScriptNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByScriptResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.ScriptRevisionsClient", "listByScriptNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByScriptComplete enumerates all values, automatically crossing page boundaries as required.
func (client ScriptRevisionsClient) ListByScriptComplete(ctx context.Context, resourceGroupName string, workspaceName string, scriptName string, skipToken string) (result ScriptListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/ScriptRevisionsClient.ListByScript")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByScript(ctx, resourceGroupName, workspaceName, scriptName, skipToken)
	return
}
