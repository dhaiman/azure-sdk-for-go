package datacollaboration

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"context"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/azure"
	"github.com/Azure/go-autorest/tracing"
	"net/http"
)

// PipelineStepRunsClient is the creates a Microsoft.DataCollaboration management client.
type PipelineStepRunsClient struct {
	BaseClient
}

// NewPipelineStepRunsClient creates an instance of the PipelineStepRunsClient client.
func NewPipelineStepRunsClient(subscriptionID string) PipelineStepRunsClient {
	return NewPipelineStepRunsClientWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewPipelineStepRunsClientWithBaseURI creates an instance of the PipelineStepRunsClient client using a custom
// endpoint.  Use this when interacting with an Azure cloud that uses a non-standard base URI (sovereign clouds, Azure
// stack).
func NewPipelineStepRunsClientWithBaseURI(baseURI string, subscriptionID string) PipelineStepRunsClient {
	return PipelineStepRunsClient{NewWithBaseURI(baseURI, subscriptionID)}
}

// Get get a pipeline run in a pipeline
// Parameters:
// resourceGroupName - the resource group name.
// workspaceName - the name of the workspace.
// pipelineName - the name of the pipeline.
// pipelineRunName - the name of the pipeline run.
// pipelineStepRunID - the id of the pipeline step run.
func (client PipelineStepRunsClient) Get(ctx context.Context, resourceGroupName string, workspaceName string, pipelineName string, pipelineRunName string, pipelineStepRunID string) (result PipelineStepRun, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PipelineStepRunsClient.Get")
		defer func() {
			sc := -1
			if result.Response.Response != nil {
				sc = result.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	req, err := client.GetPreparer(ctx, resourceGroupName, workspaceName, pipelineName, pipelineRunName, pipelineStepRunID)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.PipelineStepRunsClient", "Get", nil, "Failure preparing request")
		return
	}

	resp, err := client.GetSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "datacollaboration.PipelineStepRunsClient", "Get", resp, "Failure sending request")
		return
	}

	result, err = client.GetResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.PipelineStepRunsClient", "Get", resp, "Failure responding to request")
	}

	return
}

// GetPreparer prepares the Get request.
func (client PipelineStepRunsClient) GetPreparer(ctx context.Context, resourceGroupName string, workspaceName string, pipelineName string, pipelineRunName string, pipelineStepRunID string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"pipelineName":      autorest.Encode("path", pipelineName),
		"pipelineRunName":   autorest.Encode("path", pipelineRunName),
		"pipelineStepRunId": autorest.Encode("path", pipelineStepRunID),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	const APIVersion = "2020-05-04-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCollaboration/workspaces/{workspaceName}/pipelines/{pipelineName}/pipelineRuns/{pipelineRunName}/pipelineStepRuns/{pipelineStepRunId}", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// GetSender sends the Get request. The method will close the
// http.Response Body if it receives an error.
func (client PipelineStepRunsClient) GetSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// GetResponder handles the response to the Get request. The method always
// closes the http.Response Body.
func (client PipelineStepRunsClient) GetResponder(resp *http.Response) (result PipelineStepRun, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// ListByPipelineRun list pipelines run of a pipeline
// Parameters:
// resourceGroupName - the resource group name.
// workspaceName - the name of the workspace.
// pipelineName - the name of the pipeline.
// pipelineRunName - the name of the pipeline run.
// skipToken - continuation token
func (client PipelineStepRunsClient) ListByPipelineRun(ctx context.Context, resourceGroupName string, workspaceName string, pipelineName string, pipelineRunName string, skipToken string) (result PipelineStepRunListPage, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PipelineStepRunsClient.ListByPipelineRun")
		defer func() {
			sc := -1
			if result.psrl.Response.Response != nil {
				sc = result.psrl.Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.fn = client.listByPipelineRunNextResults
	req, err := client.ListByPipelineRunPreparer(ctx, resourceGroupName, workspaceName, pipelineName, pipelineRunName, skipToken)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.PipelineStepRunsClient", "ListByPipelineRun", nil, "Failure preparing request")
		return
	}

	resp, err := client.ListByPipelineRunSender(req)
	if err != nil {
		result.psrl.Response = autorest.Response{Response: resp}
		err = autorest.NewErrorWithError(err, "datacollaboration.PipelineStepRunsClient", "ListByPipelineRun", resp, "Failure sending request")
		return
	}

	result.psrl, err = client.ListByPipelineRunResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.PipelineStepRunsClient", "ListByPipelineRun", resp, "Failure responding to request")
	}

	return
}

// ListByPipelineRunPreparer prepares the ListByPipelineRun request.
func (client PipelineStepRunsClient) ListByPipelineRunPreparer(ctx context.Context, resourceGroupName string, workspaceName string, pipelineName string, pipelineRunName string, skipToken string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"pipelineName":      autorest.Encode("path", pipelineName),
		"pipelineRunName":   autorest.Encode("path", pipelineRunName),
		"resourceGroupName": autorest.Encode("path", resourceGroupName),
		"subscriptionId":    autorest.Encode("path", client.SubscriptionID),
		"workspaceName":     autorest.Encode("path", workspaceName),
	}

	const APIVersion = "2020-05-04-preview"
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(skipToken) > 0 {
		queryParameters["$skipToken"] = autorest.Encode("query", skipToken)
	}

	preparer := autorest.CreatePreparer(
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPathParameters("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataCollaboration/workspaces/{workspaceName}/pipelines/{pipelineName}/pipelineRuns/{pipelineRunName}/pipelineStepRuns", pathParameters),
		autorest.WithQueryParameters(queryParameters))
	return preparer.Prepare((&http.Request{}).WithContext(ctx))
}

// ListByPipelineRunSender sends the ListByPipelineRun request. The method will close the
// http.Response Body if it receives an error.
func (client PipelineStepRunsClient) ListByPipelineRunSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, azure.DoRetryWithRegistration(client.Client))
}

// ListByPipelineRunResponder handles the response to the ListByPipelineRun request. The method always
// closes the http.Response Body.
func (client PipelineStepRunsClient) ListByPipelineRunResponder(resp *http.Response) (result PipelineStepRunList, err error) {
	err = autorest.Respond(
		resp,
		azure.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// listByPipelineRunNextResults retrieves the next set of results, if any.
func (client PipelineStepRunsClient) listByPipelineRunNextResults(ctx context.Context, lastResults PipelineStepRunList) (result PipelineStepRunList, err error) {
	req, err := lastResults.pipelineStepRunListPreparer(ctx)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "datacollaboration.PipelineStepRunsClient", "listByPipelineRunNextResults", nil, "Failure preparing next results request")
	}
	if req == nil {
		return
	}
	resp, err := client.ListByPipelineRunSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "datacollaboration.PipelineStepRunsClient", "listByPipelineRunNextResults", resp, "Failure sending next results request")
	}
	result, err = client.ListByPipelineRunResponder(resp)
	if err != nil {
		err = autorest.NewErrorWithError(err, "datacollaboration.PipelineStepRunsClient", "listByPipelineRunNextResults", resp, "Failure responding to next results request")
	}
	return
}

// ListByPipelineRunComplete enumerates all values, automatically crossing page boundaries as required.
func (client PipelineStepRunsClient) ListByPipelineRunComplete(ctx context.Context, resourceGroupName string, workspaceName string, pipelineName string, pipelineRunName string, skipToken string) (result PipelineStepRunListIterator, err error) {
	if tracing.IsEnabled() {
		ctx = tracing.StartSpan(ctx, fqdn+"/PipelineStepRunsClient.ListByPipelineRun")
		defer func() {
			sc := -1
			if result.Response().Response.Response != nil {
				sc = result.page.Response().Response.Response.StatusCode
			}
			tracing.EndSpan(ctx, sc, err)
		}()
	}
	result.page, err = client.ListByPipelineRun(ctx, resourceGroupName, workspaceName, pipelineName, pipelineRunName, skipToken)
	return
}
