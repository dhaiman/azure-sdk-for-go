package mediaedgelvaclient

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"encoding/json"
	"github.com/Azure/go-autorest/autorest"
	"github.com/Azure/go-autorest/autorest/date"
)

// The package's fully qualified name.
const fqdn = "github.com/Azure/azure-sdk-for-go/services/stable/mediaservices/package-media-edge-lva-client-1-0-0/media-edge-lva-client"

// MediaGraphImageEncodingFormat enumerates the values for media graph image encoding format.
type MediaGraphImageEncodingFormat string

const (
	// Bmp BMP image format.
	Bmp MediaGraphImageEncodingFormat = "Bmp"
	// Jpeg JPEG image format.
	Jpeg MediaGraphImageEncodingFormat = "Jpeg"
	// Png PNG image format.
	Png MediaGraphImageEncodingFormat = "Png"
)

// PossibleMediaGraphImageEncodingFormatValues returns an array of possible values for the MediaGraphImageEncodingFormat const type.
func PossibleMediaGraphImageEncodingFormatValues() []MediaGraphImageEncodingFormat {
	return []MediaGraphImageEncodingFormat{Bmp, Jpeg, Png}
}

// MediaGraphImageFormatRawPixelFormat enumerates the values for media graph image format raw pixel format.
type MediaGraphImageFormatRawPixelFormat string

const (
	// Abgr Packed ABGR 8:8:8:8, 32bpp, ABGRABGR.
	Abgr MediaGraphImageFormatRawPixelFormat = "Abgr"
	// Argb Packed ARGB 8:8:8:8, 32bpp, ARGBARGB.
	Argb MediaGraphImageFormatRawPixelFormat = "Argb"
	// Bgr24 Packed RGB 8:8:8, 24bpp, BGRBGR.
	Bgr24 MediaGraphImageFormatRawPixelFormat = "Bgr24"
	// Bgra Packed BGRA 8:8:8:8, 32bpp, BGRABGRA.
	Bgra MediaGraphImageFormatRawPixelFormat = "Bgra"
	// Rgb24 Packed RGB 8:8:8, 24bpp, RGBRGB.
	Rgb24 MediaGraphImageFormatRawPixelFormat = "Rgb24"
	// Rgb555be Packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), big-endian , X=unused/undefined.
	Rgb555be MediaGraphImageFormatRawPixelFormat = "Rgb555be"
	// Rgb555le Packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), little-endian, X=unused/undefined.
	Rgb555le MediaGraphImageFormatRawPixelFormat = "Rgb555le"
	// Rgb565be Packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), big-endian.
	Rgb565be MediaGraphImageFormatRawPixelFormat = "Rgb565be"
	// Rgb565le Packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), little-endian.
	Rgb565le MediaGraphImageFormatRawPixelFormat = "Rgb565le"
	// Rgba Packed RGBA 8:8:8:8, 32bpp, RGBARGBA.
	Rgba MediaGraphImageFormatRawPixelFormat = "Rgba"
	// Yuv420p Planar YUV 4:2:0, 12bpp, (1 Cr and Cb sample per 2x2 Y samples).
	Yuv420p MediaGraphImageFormatRawPixelFormat = "Yuv420p"
)

// PossibleMediaGraphImageFormatRawPixelFormatValues returns an array of possible values for the MediaGraphImageFormatRawPixelFormat const type.
func PossibleMediaGraphImageFormatRawPixelFormatValues() []MediaGraphImageFormatRawPixelFormat {
	return []MediaGraphImageFormatRawPixelFormat{Abgr, Argb, Bgr24, Bgra, Rgb24, Rgb555be, Rgb555le, Rgb565be, Rgb565le, Rgba, Yuv420p}
}

// MediaGraphImageScaleMode enumerates the values for media graph image scale mode.
type MediaGraphImageScaleMode string

const (
	// Pad Center pad the input frame to match the given dimensions.
	Pad MediaGraphImageScaleMode = "Pad"
	// PreserveAspectRatio Use the same aspect ratio as the input frame.
	PreserveAspectRatio MediaGraphImageScaleMode = "PreserveAspectRatio"
	// Stretch Stretch input frame to match given dimensions.
	Stretch MediaGraphImageScaleMode = "Stretch"
)

// PossibleMediaGraphImageScaleModeValues returns an array of possible values for the MediaGraphImageScaleMode const type.
func PossibleMediaGraphImageScaleModeValues() []MediaGraphImageScaleMode {
	return []MediaGraphImageScaleMode{Pad, PreserveAspectRatio, Stretch}
}

// MediaGraphInstanceState enumerates the values for media graph instance state.
type MediaGraphInstanceState string

const (
	// Activating Activating state.
	Activating MediaGraphInstanceState = "Activating"
	// Active Active state.
	Active MediaGraphInstanceState = "Active"
	// Deactivating Deactivating state.
	Deactivating MediaGraphInstanceState = "Deactivating"
	// Inactive Inactive state.
	Inactive MediaGraphInstanceState = "Inactive"
)

// PossibleMediaGraphInstanceStateValues returns an array of possible values for the MediaGraphInstanceState const type.
func PossibleMediaGraphInstanceStateValues() []MediaGraphInstanceState {
	return []MediaGraphInstanceState{Activating, Active, Deactivating, Inactive}
}

// MediaGraphMotionDetectionSensitivity enumerates the values for media graph motion detection sensitivity.
type MediaGraphMotionDetectionSensitivity string

const (
	// High High Sensitivity.
	High MediaGraphMotionDetectionSensitivity = "High"
	// Low Low Sensitivity.
	Low MediaGraphMotionDetectionSensitivity = "Low"
	// Medium Medium Sensitivity.
	Medium MediaGraphMotionDetectionSensitivity = "Medium"
)

// PossibleMediaGraphMotionDetectionSensitivityValues returns an array of possible values for the MediaGraphMotionDetectionSensitivity const type.
func PossibleMediaGraphMotionDetectionSensitivityValues() []MediaGraphMotionDetectionSensitivity {
	return []MediaGraphMotionDetectionSensitivity{High, Low, Medium}
}

// MediaGraphOutputSelectorOperator enumerates the values for media graph output selector operator.
type MediaGraphOutputSelectorOperator string

const (
	// Is A media type is the same type or a subtype.
	Is MediaGraphOutputSelectorOperator = "is"
	// IsNot A media type is not the same type or a subtype.
	IsNot MediaGraphOutputSelectorOperator = "isNot"
)

// PossibleMediaGraphOutputSelectorOperatorValues returns an array of possible values for the MediaGraphOutputSelectorOperator const type.
func PossibleMediaGraphOutputSelectorOperatorValues() []MediaGraphOutputSelectorOperator {
	return []MediaGraphOutputSelectorOperator{Is, IsNot}
}

// MediaGraphOutputSelectorProperty enumerates the values for media graph output selector property.
type MediaGraphOutputSelectorProperty string

const (
	// MediaType The stream's MIME type or subtype.
	MediaType MediaGraphOutputSelectorProperty = "mediaType"
)

// PossibleMediaGraphOutputSelectorPropertyValues returns an array of possible values for the MediaGraphOutputSelectorProperty const type.
func PossibleMediaGraphOutputSelectorPropertyValues() []MediaGraphOutputSelectorProperty {
	return []MediaGraphOutputSelectorProperty{MediaType}
}

// MediaGraphParameterType enumerates the values for media graph parameter type.
type MediaGraphParameterType string

const (
	// Bool A boolean value that is either true or false.
	Bool MediaGraphParameterType = "Bool"
	// Double A 64-bit double-precision floating point type as parameter value.
	Double MediaGraphParameterType = "Double"
	// Int A 32-bit signed integer as parameter value.
	Int MediaGraphParameterType = "Int"
	// SecretString A string to hold sensitive information as parameter value.
	SecretString MediaGraphParameterType = "SecretString"
	// String A string parameter value.
	String MediaGraphParameterType = "String"
)

// PossibleMediaGraphParameterTypeValues returns an array of possible values for the MediaGraphParameterType const type.
func PossibleMediaGraphParameterTypeValues() []MediaGraphParameterType {
	return []MediaGraphParameterType{Bool, Double, Int, SecretString, String}
}

// MediaGraphRtspTransport enumerates the values for media graph rtsp transport.
type MediaGraphRtspTransport string

const (
	// HTTP HTTP/HTTPS transport. This should be used when HTTP tunneling is desired.
	HTTP MediaGraphRtspTransport = "Http"
	// TCP TCP transport. This should be used when HTTP tunneling is NOT desired.
	TCP MediaGraphRtspTransport = "Tcp"
)

// PossibleMediaGraphRtspTransportValues returns an array of possible values for the MediaGraphRtspTransport const type.
func PossibleMediaGraphRtspTransportValues() []MediaGraphRtspTransport {
	return []MediaGraphRtspTransport{HTTP, TCP}
}

// Type enumerates the values for type.
type Type string

const (
	// TypeMediaGraphSource ...
	TypeMediaGraphSource Type = "MediaGraphSource"
	// TypeMicrosoftMediaMediaGraphIoTHubMessageSource ...
	TypeMicrosoftMediaMediaGraphIoTHubMessageSource Type = "#Microsoft.Media.MediaGraphIoTHubMessageSource"
	// TypeMicrosoftMediaMediaGraphRtspSource ...
	TypeMicrosoftMediaMediaGraphRtspSource Type = "#Microsoft.Media.MediaGraphRtspSource"
)

// PossibleTypeValues returns an array of possible values for the Type const type.
func PossibleTypeValues() []Type {
	return []Type{TypeMediaGraphSource, TypeMicrosoftMediaMediaGraphIoTHubMessageSource, TypeMicrosoftMediaMediaGraphRtspSource}
}

// TypeBasicMediaGraphCertificateSource enumerates the values for type basic media graph certificate source.
type TypeBasicMediaGraphCertificateSource string

const (
	// TypeMediaGraphCertificateSource ...
	TypeMediaGraphCertificateSource TypeBasicMediaGraphCertificateSource = "MediaGraphCertificateSource"
	// TypeMicrosoftMediaMediaGraphPemCertificateList ...
	TypeMicrosoftMediaMediaGraphPemCertificateList TypeBasicMediaGraphCertificateSource = "#Microsoft.Media.MediaGraphPemCertificateList"
)

// PossibleTypeBasicMediaGraphCertificateSourceValues returns an array of possible values for the TypeBasicMediaGraphCertificateSource const type.
func PossibleTypeBasicMediaGraphCertificateSourceValues() []TypeBasicMediaGraphCertificateSource {
	return []TypeBasicMediaGraphCertificateSource{TypeMediaGraphCertificateSource, TypeMicrosoftMediaMediaGraphPemCertificateList}
}

// TypeBasicMediaGraphCredentials enumerates the values for type basic media graph credentials.
type TypeBasicMediaGraphCredentials string

const (
	// TypeMediaGraphCredentials ...
	TypeMediaGraphCredentials TypeBasicMediaGraphCredentials = "MediaGraphCredentials"
	// TypeMicrosoftMediaMediaGraphHTTPHeaderCredentials ...
	TypeMicrosoftMediaMediaGraphHTTPHeaderCredentials TypeBasicMediaGraphCredentials = "#Microsoft.Media.MediaGraphHttpHeaderCredentials"
	// TypeMicrosoftMediaMediaGraphUsernamePasswordCredentials ...
	TypeMicrosoftMediaMediaGraphUsernamePasswordCredentials TypeBasicMediaGraphCredentials = "#Microsoft.Media.MediaGraphUsernamePasswordCredentials"
)

// PossibleTypeBasicMediaGraphCredentialsValues returns an array of possible values for the TypeBasicMediaGraphCredentials const type.
func PossibleTypeBasicMediaGraphCredentialsValues() []TypeBasicMediaGraphCredentials {
	return []TypeBasicMediaGraphCredentials{TypeMediaGraphCredentials, TypeMicrosoftMediaMediaGraphHTTPHeaderCredentials, TypeMicrosoftMediaMediaGraphUsernamePasswordCredentials}
}

// TypeBasicMediaGraphEndpoint enumerates the values for type basic media graph endpoint.
type TypeBasicMediaGraphEndpoint string

const (
	// TypeMediaGraphEndpoint ...
	TypeMediaGraphEndpoint TypeBasicMediaGraphEndpoint = "MediaGraphEndpoint"
	// TypeMicrosoftMediaMediaGraphTLSEndpoint ...
	TypeMicrosoftMediaMediaGraphTLSEndpoint TypeBasicMediaGraphEndpoint = "#Microsoft.Media.MediaGraphTlsEndpoint"
	// TypeMicrosoftMediaMediaGraphUnsecuredEndpoint ...
	TypeMicrosoftMediaMediaGraphUnsecuredEndpoint TypeBasicMediaGraphEndpoint = "#Microsoft.Media.MediaGraphUnsecuredEndpoint"
)

// PossibleTypeBasicMediaGraphEndpointValues returns an array of possible values for the TypeBasicMediaGraphEndpoint const type.
func PossibleTypeBasicMediaGraphEndpointValues() []TypeBasicMediaGraphEndpoint {
	return []TypeBasicMediaGraphEndpoint{TypeMediaGraphEndpoint, TypeMicrosoftMediaMediaGraphTLSEndpoint, TypeMicrosoftMediaMediaGraphUnsecuredEndpoint}
}

// TypeBasicMediaGraphImageFormat enumerates the values for type basic media graph image format.
type TypeBasicMediaGraphImageFormat string

const (
	// TypeMicrosoftMediaMediaGraphImageFormat ...
	TypeMicrosoftMediaMediaGraphImageFormat TypeBasicMediaGraphImageFormat = "#Microsoft.Media.MediaGraphImageFormat"
	// TypeMicrosoftMediaMediaGraphImageFormatEncoded ...
	TypeMicrosoftMediaMediaGraphImageFormatEncoded TypeBasicMediaGraphImageFormat = "#Microsoft.Media.MediaGraphImageFormatEncoded"
	// TypeMicrosoftMediaMediaGraphImageFormatRaw ...
	TypeMicrosoftMediaMediaGraphImageFormatRaw TypeBasicMediaGraphImageFormat = "#Microsoft.Media.MediaGraphImageFormatRaw"
)

// PossibleTypeBasicMediaGraphImageFormatValues returns an array of possible values for the TypeBasicMediaGraphImageFormat const type.
func PossibleTypeBasicMediaGraphImageFormatValues() []TypeBasicMediaGraphImageFormat {
	return []TypeBasicMediaGraphImageFormat{TypeMicrosoftMediaMediaGraphImageFormat, TypeMicrosoftMediaMediaGraphImageFormatEncoded, TypeMicrosoftMediaMediaGraphImageFormatRaw}
}

// TypeBasicMediaGraphProcessor enumerates the values for type basic media graph processor.
type TypeBasicMediaGraphProcessor string

const (
	// TypeMediaGraphProcessor ...
	TypeMediaGraphProcessor TypeBasicMediaGraphProcessor = "MediaGraphProcessor"
	// TypeMicrosoftMediaMediaGraphExtensionProcessorBase ...
	TypeMicrosoftMediaMediaGraphExtensionProcessorBase TypeBasicMediaGraphProcessor = "#Microsoft.Media.MediaGraphExtensionProcessorBase"
	// TypeMicrosoftMediaMediaGraphFrameRateFilterProcessor ...
	TypeMicrosoftMediaMediaGraphFrameRateFilterProcessor TypeBasicMediaGraphProcessor = "#Microsoft.Media.MediaGraphFrameRateFilterProcessor"
	// TypeMicrosoftMediaMediaGraphHTTPExtension ...
	TypeMicrosoftMediaMediaGraphHTTPExtension TypeBasicMediaGraphProcessor = "#Microsoft.Media.MediaGraphHttpExtension"
	// TypeMicrosoftMediaMediaGraphMotionDetectionProcessor ...
	TypeMicrosoftMediaMediaGraphMotionDetectionProcessor TypeBasicMediaGraphProcessor = "#Microsoft.Media.MediaGraphMotionDetectionProcessor"
	// TypeMicrosoftMediaMediaGraphSignalGateProcessor ...
	TypeMicrosoftMediaMediaGraphSignalGateProcessor TypeBasicMediaGraphProcessor = "#Microsoft.Media.MediaGraphSignalGateProcessor"
)

// PossibleTypeBasicMediaGraphProcessorValues returns an array of possible values for the TypeBasicMediaGraphProcessor const type.
func PossibleTypeBasicMediaGraphProcessorValues() []TypeBasicMediaGraphProcessor {
	return []TypeBasicMediaGraphProcessor{TypeMediaGraphProcessor, TypeMicrosoftMediaMediaGraphExtensionProcessorBase, TypeMicrosoftMediaMediaGraphFrameRateFilterProcessor, TypeMicrosoftMediaMediaGraphHTTPExtension, TypeMicrosoftMediaMediaGraphMotionDetectionProcessor, TypeMicrosoftMediaMediaGraphSignalGateProcessor}
}

// TypeBasicMediaGraphSink enumerates the values for type basic media graph sink.
type TypeBasicMediaGraphSink string

const (
	// TypeMediaGraphSink ...
	TypeMediaGraphSink TypeBasicMediaGraphSink = "MediaGraphSink"
	// TypeMicrosoftMediaMediaGraphAssetSink ...
	TypeMicrosoftMediaMediaGraphAssetSink TypeBasicMediaGraphSink = "#Microsoft.Media.MediaGraphAssetSink"
	// TypeMicrosoftMediaMediaGraphFileSink ...
	TypeMicrosoftMediaMediaGraphFileSink TypeBasicMediaGraphSink = "#Microsoft.Media.MediaGraphFileSink"
	// TypeMicrosoftMediaMediaGraphIoTHubMessageSink ...
	TypeMicrosoftMediaMediaGraphIoTHubMessageSink TypeBasicMediaGraphSink = "#Microsoft.Media.MediaGraphIoTHubMessageSink"
)

// PossibleTypeBasicMediaGraphSinkValues returns an array of possible values for the TypeBasicMediaGraphSink const type.
func PossibleTypeBasicMediaGraphSinkValues() []TypeBasicMediaGraphSink {
	return []TypeBasicMediaGraphSink{TypeMediaGraphSink, TypeMicrosoftMediaMediaGraphAssetSink, TypeMicrosoftMediaMediaGraphFileSink, TypeMicrosoftMediaMediaGraphIoTHubMessageSink}
}

// MediaGraphAssetSink enables a graph to record media to an Azure Media Services asset, for subsequent
// playback.
type MediaGraphAssetSink struct {
	// AssetNamePattern - A name pattern when creating new assets.
	AssetNamePattern *string `json:"assetNamePattern,omitempty"`
	// SegmentLength - When writing media to an asset, wait until at least this duration of media has been accumulated on the Edge. Expressed in increments of 30 seconds, with a minimum of 30 seconds and a recommended maximum of 5 minutes.
	SegmentLength *string `json:"segmentLength,omitempty"`
	// LocalMediaCachePath - Path to a local file system directory for temporary caching of media, before writing to an Asset. Used when the Edge device is temporarily disconnected from Azure.
	LocalMediaCachePath *string `json:"localMediaCachePath,omitempty"`
	// LocalMediaCacheMaximumSizeMiB - Maximum amount of disk space that can be used for temporary caching of media.
	LocalMediaCacheMaximumSizeMiB *string `json:"localMediaCacheMaximumSizeMiB,omitempty"`
	// Name - Name to be used for the media graph sink.
	Name *string `json:"name,omitempty"`
	// Inputs - An array of the names of the other nodes in the media graph, the outputs of which are used as input for this sink node.
	Inputs *[]MediaGraphNodeInput `json:"inputs,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphSink', 'TypeMicrosoftMediaMediaGraphIoTHubMessageSink', 'TypeMicrosoftMediaMediaGraphFileSink', 'TypeMicrosoftMediaMediaGraphAssetSink'
	Type TypeBasicMediaGraphSink `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphAssetSink.
func (mgas MediaGraphAssetSink) MarshalJSON() ([]byte, error) {
	mgas.Type = TypeMicrosoftMediaMediaGraphAssetSink
	objectMap := make(map[string]interface{})
	if mgas.AssetNamePattern != nil {
		objectMap["assetNamePattern"] = mgas.AssetNamePattern
	}
	if mgas.SegmentLength != nil {
		objectMap["segmentLength"] = mgas.SegmentLength
	}
	if mgas.LocalMediaCachePath != nil {
		objectMap["localMediaCachePath"] = mgas.LocalMediaCachePath
	}
	if mgas.LocalMediaCacheMaximumSizeMiB != nil {
		objectMap["localMediaCacheMaximumSizeMiB"] = mgas.LocalMediaCacheMaximumSizeMiB
	}
	if mgas.Name != nil {
		objectMap["name"] = mgas.Name
	}
	if mgas.Inputs != nil {
		objectMap["inputs"] = mgas.Inputs
	}
	if mgas.Type != "" {
		objectMap["@type"] = mgas.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphIoTHubMessageSink is the BasicMediaGraphSink implementation for MediaGraphAssetSink.
func (mgas MediaGraphAssetSink) AsMediaGraphIoTHubMessageSink() (*MediaGraphIoTHubMessageSink, bool) {
	return nil, false
}

// AsMediaGraphFileSink is the BasicMediaGraphSink implementation for MediaGraphAssetSink.
func (mgas MediaGraphAssetSink) AsMediaGraphFileSink() (*MediaGraphFileSink, bool) {
	return nil, false
}

// AsMediaGraphAssetSink is the BasicMediaGraphSink implementation for MediaGraphAssetSink.
func (mgas MediaGraphAssetSink) AsMediaGraphAssetSink() (*MediaGraphAssetSink, bool) {
	return &mgas, true
}

// AsMediaGraphSink is the BasicMediaGraphSink implementation for MediaGraphAssetSink.
func (mgas MediaGraphAssetSink) AsMediaGraphSink() (*MediaGraphSink, bool) {
	return nil, false
}

// AsBasicMediaGraphSink is the BasicMediaGraphSink implementation for MediaGraphAssetSink.
func (mgas MediaGraphAssetSink) AsBasicMediaGraphSink() (BasicMediaGraphSink, bool) {
	return &mgas, true
}

// BasicMediaGraphCertificateSource base class for certificate sources.
type BasicMediaGraphCertificateSource interface {
	AsMediaGraphPemCertificateList() (*MediaGraphPemCertificateList, bool)
	AsMediaGraphCertificateSource() (*MediaGraphCertificateSource, bool)
}

// MediaGraphCertificateSource base class for certificate sources.
type MediaGraphCertificateSource struct {
	// Type - Possible values include: 'TypeMediaGraphCertificateSource', 'TypeMicrosoftMediaMediaGraphPemCertificateList'
	Type TypeBasicMediaGraphCertificateSource `json:"@type,omitempty"`
}

func unmarshalBasicMediaGraphCertificateSource(body []byte) (BasicMediaGraphCertificateSource, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["@type"] {
	case string(TypeMicrosoftMediaMediaGraphPemCertificateList):
		var mgpcl MediaGraphPemCertificateList
		err := json.Unmarshal(body, &mgpcl)
		return mgpcl, err
	default:
		var mgcs MediaGraphCertificateSource
		err := json.Unmarshal(body, &mgcs)
		return mgcs, err
	}
}
func unmarshalBasicMediaGraphCertificateSourceArray(body []byte) ([]BasicMediaGraphCertificateSource, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	mgcsArray := make([]BasicMediaGraphCertificateSource, len(rawMessages))

	for index, rawMessage := range rawMessages {
		mgcs, err := unmarshalBasicMediaGraphCertificateSource(*rawMessage)
		if err != nil {
			return nil, err
		}
		mgcsArray[index] = mgcs
	}
	return mgcsArray, nil
}

// MarshalJSON is the custom marshaler for MediaGraphCertificateSource.
func (mgcs MediaGraphCertificateSource) MarshalJSON() ([]byte, error) {
	mgcs.Type = TypeMediaGraphCertificateSource
	objectMap := make(map[string]interface{})
	if mgcs.Type != "" {
		objectMap["@type"] = mgcs.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphPemCertificateList is the BasicMediaGraphCertificateSource implementation for MediaGraphCertificateSource.
func (mgcs MediaGraphCertificateSource) AsMediaGraphPemCertificateList() (*MediaGraphPemCertificateList, bool) {
	return nil, false
}

// AsMediaGraphCertificateSource is the BasicMediaGraphCertificateSource implementation for MediaGraphCertificateSource.
func (mgcs MediaGraphCertificateSource) AsMediaGraphCertificateSource() (*MediaGraphCertificateSource, bool) {
	return &mgcs, true
}

// AsBasicMediaGraphCertificateSource is the BasicMediaGraphCertificateSource implementation for MediaGraphCertificateSource.
func (mgcs MediaGraphCertificateSource) AsBasicMediaGraphCertificateSource() (BasicMediaGraphCertificateSource, bool) {
	return &mgcs, true
}

// BasicMediaGraphCredentials credentials to present during authentication.
type BasicMediaGraphCredentials interface {
	AsMediaGraphUsernamePasswordCredentials() (*MediaGraphUsernamePasswordCredentials, bool)
	AsMediaGraphHTTPHeaderCredentials() (*MediaGraphHTTPHeaderCredentials, bool)
	AsMediaGraphCredentials() (*MediaGraphCredentials, bool)
}

// MediaGraphCredentials credentials to present during authentication.
type MediaGraphCredentials struct {
	// Type - Possible values include: 'TypeMediaGraphCredentials', 'TypeMicrosoftMediaMediaGraphUsernamePasswordCredentials', 'TypeMicrosoftMediaMediaGraphHTTPHeaderCredentials'
	Type TypeBasicMediaGraphCredentials `json:"@type,omitempty"`
}

func unmarshalBasicMediaGraphCredentials(body []byte) (BasicMediaGraphCredentials, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["@type"] {
	case string(TypeMicrosoftMediaMediaGraphUsernamePasswordCredentials):
		var mgupc MediaGraphUsernamePasswordCredentials
		err := json.Unmarshal(body, &mgupc)
		return mgupc, err
	case string(TypeMicrosoftMediaMediaGraphHTTPHeaderCredentials):
		var mghhc MediaGraphHTTPHeaderCredentials
		err := json.Unmarshal(body, &mghhc)
		return mghhc, err
	default:
		var mgc MediaGraphCredentials
		err := json.Unmarshal(body, &mgc)
		return mgc, err
	}
}
func unmarshalBasicMediaGraphCredentialsArray(body []byte) ([]BasicMediaGraphCredentials, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	mgcArray := make([]BasicMediaGraphCredentials, len(rawMessages))

	for index, rawMessage := range rawMessages {
		mgc, err := unmarshalBasicMediaGraphCredentials(*rawMessage)
		if err != nil {
			return nil, err
		}
		mgcArray[index] = mgc
	}
	return mgcArray, nil
}

// MarshalJSON is the custom marshaler for MediaGraphCredentials.
func (mgc MediaGraphCredentials) MarshalJSON() ([]byte, error) {
	mgc.Type = TypeMediaGraphCredentials
	objectMap := make(map[string]interface{})
	if mgc.Type != "" {
		objectMap["@type"] = mgc.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphUsernamePasswordCredentials is the BasicMediaGraphCredentials implementation for MediaGraphCredentials.
func (mgc MediaGraphCredentials) AsMediaGraphUsernamePasswordCredentials() (*MediaGraphUsernamePasswordCredentials, bool) {
	return nil, false
}

// AsMediaGraphHTTPHeaderCredentials is the BasicMediaGraphCredentials implementation for MediaGraphCredentials.
func (mgc MediaGraphCredentials) AsMediaGraphHTTPHeaderCredentials() (*MediaGraphHTTPHeaderCredentials, bool) {
	return nil, false
}

// AsMediaGraphCredentials is the BasicMediaGraphCredentials implementation for MediaGraphCredentials.
func (mgc MediaGraphCredentials) AsMediaGraphCredentials() (*MediaGraphCredentials, bool) {
	return &mgc, true
}

// AsBasicMediaGraphCredentials is the BasicMediaGraphCredentials implementation for MediaGraphCredentials.
func (mgc MediaGraphCredentials) AsBasicMediaGraphCredentials() (BasicMediaGraphCredentials, bool) {
	return &mgc, true
}

// BasicMediaGraphEndpoint base class for endpoints.
type BasicMediaGraphEndpoint interface {
	AsMediaGraphUnsecuredEndpoint() (*MediaGraphUnsecuredEndpoint, bool)
	AsMediaGraphTLSEndpoint() (*MediaGraphTLSEndpoint, bool)
	AsMediaGraphEndpoint() (*MediaGraphEndpoint, bool)
}

// MediaGraphEndpoint base class for endpoints.
type MediaGraphEndpoint struct {
	// Credentials - Polymorphic credentials to be presented to the endpoint.
	Credentials BasicMediaGraphCredentials `json:"credentials,omitempty"`
	// URL - Url for the endpoint.
	URL *string `json:"url,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphEndpoint', 'TypeMicrosoftMediaMediaGraphUnsecuredEndpoint', 'TypeMicrosoftMediaMediaGraphTLSEndpoint'
	Type TypeBasicMediaGraphEndpoint `json:"@type,omitempty"`
}

func unmarshalBasicMediaGraphEndpoint(body []byte) (BasicMediaGraphEndpoint, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["@type"] {
	case string(TypeMicrosoftMediaMediaGraphUnsecuredEndpoint):
		var mgue MediaGraphUnsecuredEndpoint
		err := json.Unmarshal(body, &mgue)
		return mgue, err
	case string(TypeMicrosoftMediaMediaGraphTLSEndpoint):
		var mgte MediaGraphTLSEndpoint
		err := json.Unmarshal(body, &mgte)
		return mgte, err
	default:
		var mge MediaGraphEndpoint
		err := json.Unmarshal(body, &mge)
		return mge, err
	}
}
func unmarshalBasicMediaGraphEndpointArray(body []byte) ([]BasicMediaGraphEndpoint, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	mgeArray := make([]BasicMediaGraphEndpoint, len(rawMessages))

	for index, rawMessage := range rawMessages {
		mge, err := unmarshalBasicMediaGraphEndpoint(*rawMessage)
		if err != nil {
			return nil, err
		}
		mgeArray[index] = mge
	}
	return mgeArray, nil
}

// MarshalJSON is the custom marshaler for MediaGraphEndpoint.
func (mge MediaGraphEndpoint) MarshalJSON() ([]byte, error) {
	mge.Type = TypeMediaGraphEndpoint
	objectMap := make(map[string]interface{})
	objectMap["credentials"] = mge.Credentials
	if mge.URL != nil {
		objectMap["url"] = mge.URL
	}
	if mge.Type != "" {
		objectMap["@type"] = mge.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphUnsecuredEndpoint is the BasicMediaGraphEndpoint implementation for MediaGraphEndpoint.
func (mge MediaGraphEndpoint) AsMediaGraphUnsecuredEndpoint() (*MediaGraphUnsecuredEndpoint, bool) {
	return nil, false
}

// AsMediaGraphTLSEndpoint is the BasicMediaGraphEndpoint implementation for MediaGraphEndpoint.
func (mge MediaGraphEndpoint) AsMediaGraphTLSEndpoint() (*MediaGraphTLSEndpoint, bool) {
	return nil, false
}

// AsMediaGraphEndpoint is the BasicMediaGraphEndpoint implementation for MediaGraphEndpoint.
func (mge MediaGraphEndpoint) AsMediaGraphEndpoint() (*MediaGraphEndpoint, bool) {
	return &mge, true
}

// AsBasicMediaGraphEndpoint is the BasicMediaGraphEndpoint implementation for MediaGraphEndpoint.
func (mge MediaGraphEndpoint) AsBasicMediaGraphEndpoint() (BasicMediaGraphEndpoint, bool) {
	return &mge, true
}

// UnmarshalJSON is the custom unmarshaler for MediaGraphEndpoint struct.
func (mge *MediaGraphEndpoint) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "credentials":
			if v != nil {
				credentials, err := unmarshalBasicMediaGraphCredentials(*v)
				if err != nil {
					return err
				}
				mge.Credentials = credentials
			}
		case "url":
			if v != nil {
				var URL string
				err = json.Unmarshal(*v, &URL)
				if err != nil {
					return err
				}
				mge.URL = &URL
			}
		case "@type":
			if v != nil {
				var typeVar TypeBasicMediaGraphEndpoint
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				mge.Type = typeVar
			}
		}
	}

	return nil
}

// BasicMediaGraphExtensionProcessorBase processor that allows for extensions, outside of the Live Video Analytics Edge
// module, to be integrated into the graph. It is the base class for various different kinds of extension processor
// types.
type BasicMediaGraphExtensionProcessorBase interface {
	AsMediaGraphHTTPExtension() (*MediaGraphHTTPExtension, bool)
	AsMediaGraphExtensionProcessorBase() (*MediaGraphExtensionProcessorBase, bool)
}

// MediaGraphExtensionProcessorBase processor that allows for extensions, outside of the Live Video Analytics
// Edge module, to be integrated into the graph. It is the base class for various different kinds of extension
// processor types.
type MediaGraphExtensionProcessorBase struct {
	// Endpoint - Endpoint to which this processor should connect.
	Endpoint BasicMediaGraphEndpoint `json:"endpoint,omitempty"`
	// Image - Describes the parameters of the image that is sent as input to the endpoint.
	Image *MediaGraphImage `json:"image,omitempty"`
	// Name - The name for this processor node.
	Name *string `json:"name,omitempty"`
	// Inputs - An array of the names of the other nodes in the media graph, the outputs of which are used as input for this processor node.
	Inputs *[]MediaGraphNodeInput `json:"inputs,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphProcessor', 'TypeMicrosoftMediaMediaGraphMotionDetectionProcessor', 'TypeMicrosoftMediaMediaGraphExtensionProcessorBase', 'TypeMicrosoftMediaMediaGraphHTTPExtension', 'TypeMicrosoftMediaMediaGraphSignalGateProcessor', 'TypeMicrosoftMediaMediaGraphFrameRateFilterProcessor'
	Type TypeBasicMediaGraphProcessor `json:"@type,omitempty"`
}

func unmarshalBasicMediaGraphExtensionProcessorBase(body []byte) (BasicMediaGraphExtensionProcessorBase, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["@type"] {
	case string(TypeMicrosoftMediaMediaGraphHTTPExtension):
		var mghe MediaGraphHTTPExtension
		err := json.Unmarshal(body, &mghe)
		return mghe, err
	default:
		var mgepb MediaGraphExtensionProcessorBase
		err := json.Unmarshal(body, &mgepb)
		return mgepb, err
	}
}
func unmarshalBasicMediaGraphExtensionProcessorBaseArray(body []byte) ([]BasicMediaGraphExtensionProcessorBase, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	mgepbArray := make([]BasicMediaGraphExtensionProcessorBase, len(rawMessages))

	for index, rawMessage := range rawMessages {
		mgepb, err := unmarshalBasicMediaGraphExtensionProcessorBase(*rawMessage)
		if err != nil {
			return nil, err
		}
		mgepbArray[index] = mgepb
	}
	return mgepbArray, nil
}

// MarshalJSON is the custom marshaler for MediaGraphExtensionProcessorBase.
func (mgepb MediaGraphExtensionProcessorBase) MarshalJSON() ([]byte, error) {
	mgepb.Type = TypeMicrosoftMediaMediaGraphExtensionProcessorBase
	objectMap := make(map[string]interface{})
	objectMap["endpoint"] = mgepb.Endpoint
	if mgepb.Image != nil {
		objectMap["image"] = mgepb.Image
	}
	if mgepb.Name != nil {
		objectMap["name"] = mgepb.Name
	}
	if mgepb.Inputs != nil {
		objectMap["inputs"] = mgepb.Inputs
	}
	if mgepb.Type != "" {
		objectMap["@type"] = mgepb.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphMotionDetectionProcessor is the BasicMediaGraphProcessor implementation for MediaGraphExtensionProcessorBase.
func (mgepb MediaGraphExtensionProcessorBase) AsMediaGraphMotionDetectionProcessor() (*MediaGraphMotionDetectionProcessor, bool) {
	return nil, false
}

// AsMediaGraphExtensionProcessorBase is the BasicMediaGraphProcessor implementation for MediaGraphExtensionProcessorBase.
func (mgepb MediaGraphExtensionProcessorBase) AsMediaGraphExtensionProcessorBase() (*MediaGraphExtensionProcessorBase, bool) {
	return &mgepb, true
}

// AsBasicMediaGraphExtensionProcessorBase is the BasicMediaGraphProcessor implementation for MediaGraphExtensionProcessorBase.
func (mgepb MediaGraphExtensionProcessorBase) AsBasicMediaGraphExtensionProcessorBase() (BasicMediaGraphExtensionProcessorBase, bool) {
	return &mgepb, true
}

// AsMediaGraphHTTPExtension is the BasicMediaGraphProcessor implementation for MediaGraphExtensionProcessorBase.
func (mgepb MediaGraphExtensionProcessorBase) AsMediaGraphHTTPExtension() (*MediaGraphHTTPExtension, bool) {
	return nil, false
}

// AsMediaGraphSignalGateProcessor is the BasicMediaGraphProcessor implementation for MediaGraphExtensionProcessorBase.
func (mgepb MediaGraphExtensionProcessorBase) AsMediaGraphSignalGateProcessor() (*MediaGraphSignalGateProcessor, bool) {
	return nil, false
}

// AsMediaGraphFrameRateFilterProcessor is the BasicMediaGraphProcessor implementation for MediaGraphExtensionProcessorBase.
func (mgepb MediaGraphExtensionProcessorBase) AsMediaGraphFrameRateFilterProcessor() (*MediaGraphFrameRateFilterProcessor, bool) {
	return nil, false
}

// AsMediaGraphProcessor is the BasicMediaGraphProcessor implementation for MediaGraphExtensionProcessorBase.
func (mgepb MediaGraphExtensionProcessorBase) AsMediaGraphProcessor() (*MediaGraphProcessor, bool) {
	return nil, false
}

// AsBasicMediaGraphProcessor is the BasicMediaGraphProcessor implementation for MediaGraphExtensionProcessorBase.
func (mgepb MediaGraphExtensionProcessorBase) AsBasicMediaGraphProcessor() (BasicMediaGraphProcessor, bool) {
	return &mgepb, true
}

// UnmarshalJSON is the custom unmarshaler for MediaGraphExtensionProcessorBase struct.
func (mgepb *MediaGraphExtensionProcessorBase) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "endpoint":
			if v != nil {
				endpoint, err := unmarshalBasicMediaGraphEndpoint(*v)
				if err != nil {
					return err
				}
				mgepb.Endpoint = endpoint
			}
		case "image":
			if v != nil {
				var imageVar MediaGraphImage
				err = json.Unmarshal(*v, &imageVar)
				if err != nil {
					return err
				}
				mgepb.Image = &imageVar
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				mgepb.Name = &name
			}
		case "inputs":
			if v != nil {
				var inputs []MediaGraphNodeInput
				err = json.Unmarshal(*v, &inputs)
				if err != nil {
					return err
				}
				mgepb.Inputs = &inputs
			}
		case "@type":
			if v != nil {
				var typeVar TypeBasicMediaGraphProcessor
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				mgepb.Type = typeVar
			}
		}
	}

	return nil
}

// MediaGraphFileSink enables a media graph to write/store media (video and audio) to a file on the Edge
// device.
type MediaGraphFileSink struct {
	// FilePathPattern - Absolute file path pattern for creating new files on the Edge device.
	FilePathPattern *string `json:"filePathPattern,omitempty"`
	// Name - Name to be used for the media graph sink.
	Name *string `json:"name,omitempty"`
	// Inputs - An array of the names of the other nodes in the media graph, the outputs of which are used as input for this sink node.
	Inputs *[]MediaGraphNodeInput `json:"inputs,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphSink', 'TypeMicrosoftMediaMediaGraphIoTHubMessageSink', 'TypeMicrosoftMediaMediaGraphFileSink', 'TypeMicrosoftMediaMediaGraphAssetSink'
	Type TypeBasicMediaGraphSink `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphFileSink.
func (mgfs MediaGraphFileSink) MarshalJSON() ([]byte, error) {
	mgfs.Type = TypeMicrosoftMediaMediaGraphFileSink
	objectMap := make(map[string]interface{})
	if mgfs.FilePathPattern != nil {
		objectMap["filePathPattern"] = mgfs.FilePathPattern
	}
	if mgfs.Name != nil {
		objectMap["name"] = mgfs.Name
	}
	if mgfs.Inputs != nil {
		objectMap["inputs"] = mgfs.Inputs
	}
	if mgfs.Type != "" {
		objectMap["@type"] = mgfs.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphIoTHubMessageSink is the BasicMediaGraphSink implementation for MediaGraphFileSink.
func (mgfs MediaGraphFileSink) AsMediaGraphIoTHubMessageSink() (*MediaGraphIoTHubMessageSink, bool) {
	return nil, false
}

// AsMediaGraphFileSink is the BasicMediaGraphSink implementation for MediaGraphFileSink.
func (mgfs MediaGraphFileSink) AsMediaGraphFileSink() (*MediaGraphFileSink, bool) {
	return &mgfs, true
}

// AsMediaGraphAssetSink is the BasicMediaGraphSink implementation for MediaGraphFileSink.
func (mgfs MediaGraphFileSink) AsMediaGraphAssetSink() (*MediaGraphAssetSink, bool) {
	return nil, false
}

// AsMediaGraphSink is the BasicMediaGraphSink implementation for MediaGraphFileSink.
func (mgfs MediaGraphFileSink) AsMediaGraphSink() (*MediaGraphSink, bool) {
	return nil, false
}

// AsBasicMediaGraphSink is the BasicMediaGraphSink implementation for MediaGraphFileSink.
func (mgfs MediaGraphFileSink) AsBasicMediaGraphSink() (BasicMediaGraphSink, bool) {
	return &mgfs, true
}

// MediaGraphFrameRateFilterProcessor limits the frame rate on the input video stream based on the
// maximumFps property.
type MediaGraphFrameRateFilterProcessor struct {
	// MaximumFps - Ensures that the frame rate of the video leaving this processor does not exceed this limit.
	MaximumFps *string `json:"maximumFps,omitempty"`
	// Name - The name for this processor node.
	Name *string `json:"name,omitempty"`
	// Inputs - An array of the names of the other nodes in the media graph, the outputs of which are used as input for this processor node.
	Inputs *[]MediaGraphNodeInput `json:"inputs,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphProcessor', 'TypeMicrosoftMediaMediaGraphMotionDetectionProcessor', 'TypeMicrosoftMediaMediaGraphExtensionProcessorBase', 'TypeMicrosoftMediaMediaGraphHTTPExtension', 'TypeMicrosoftMediaMediaGraphSignalGateProcessor', 'TypeMicrosoftMediaMediaGraphFrameRateFilterProcessor'
	Type TypeBasicMediaGraphProcessor `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphFrameRateFilterProcessor.
func (mgfrfp MediaGraphFrameRateFilterProcessor) MarshalJSON() ([]byte, error) {
	mgfrfp.Type = TypeMicrosoftMediaMediaGraphFrameRateFilterProcessor
	objectMap := make(map[string]interface{})
	if mgfrfp.MaximumFps != nil {
		objectMap["maximumFps"] = mgfrfp.MaximumFps
	}
	if mgfrfp.Name != nil {
		objectMap["name"] = mgfrfp.Name
	}
	if mgfrfp.Inputs != nil {
		objectMap["inputs"] = mgfrfp.Inputs
	}
	if mgfrfp.Type != "" {
		objectMap["@type"] = mgfrfp.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphMotionDetectionProcessor is the BasicMediaGraphProcessor implementation for MediaGraphFrameRateFilterProcessor.
func (mgfrfp MediaGraphFrameRateFilterProcessor) AsMediaGraphMotionDetectionProcessor() (*MediaGraphMotionDetectionProcessor, bool) {
	return nil, false
}

// AsMediaGraphExtensionProcessorBase is the BasicMediaGraphProcessor implementation for MediaGraphFrameRateFilterProcessor.
func (mgfrfp MediaGraphFrameRateFilterProcessor) AsMediaGraphExtensionProcessorBase() (*MediaGraphExtensionProcessorBase, bool) {
	return nil, false
}

// AsBasicMediaGraphExtensionProcessorBase is the BasicMediaGraphProcessor implementation for MediaGraphFrameRateFilterProcessor.
func (mgfrfp MediaGraphFrameRateFilterProcessor) AsBasicMediaGraphExtensionProcessorBase() (BasicMediaGraphExtensionProcessorBase, bool) {
	return nil, false
}

// AsMediaGraphHTTPExtension is the BasicMediaGraphProcessor implementation for MediaGraphFrameRateFilterProcessor.
func (mgfrfp MediaGraphFrameRateFilterProcessor) AsMediaGraphHTTPExtension() (*MediaGraphHTTPExtension, bool) {
	return nil, false
}

// AsMediaGraphSignalGateProcessor is the BasicMediaGraphProcessor implementation for MediaGraphFrameRateFilterProcessor.
func (mgfrfp MediaGraphFrameRateFilterProcessor) AsMediaGraphSignalGateProcessor() (*MediaGraphSignalGateProcessor, bool) {
	return nil, false
}

// AsMediaGraphFrameRateFilterProcessor is the BasicMediaGraphProcessor implementation for MediaGraphFrameRateFilterProcessor.
func (mgfrfp MediaGraphFrameRateFilterProcessor) AsMediaGraphFrameRateFilterProcessor() (*MediaGraphFrameRateFilterProcessor, bool) {
	return &mgfrfp, true
}

// AsMediaGraphProcessor is the BasicMediaGraphProcessor implementation for MediaGraphFrameRateFilterProcessor.
func (mgfrfp MediaGraphFrameRateFilterProcessor) AsMediaGraphProcessor() (*MediaGraphProcessor, bool) {
	return nil, false
}

// AsBasicMediaGraphProcessor is the BasicMediaGraphProcessor implementation for MediaGraphFrameRateFilterProcessor.
func (mgfrfp MediaGraphFrameRateFilterProcessor) AsBasicMediaGraphProcessor() (BasicMediaGraphProcessor, bool) {
	return &mgfrfp, true
}

// MediaGraphHTTPExtension a processor that allows the media graph to send video frames (mostly at low
// frame rates e.g. <5 fps) to external inference container by leveraging HTTP based RESTful API. It then
// retrieves the inference results and relays them downstream to the next node.
type MediaGraphHTTPExtension struct {
	// Endpoint - Endpoint to which this processor should connect.
	Endpoint BasicMediaGraphEndpoint `json:"endpoint,omitempty"`
	// Image - Describes the parameters of the image that is sent as input to the endpoint.
	Image *MediaGraphImage `json:"image,omitempty"`
	// Name - The name for this processor node.
	Name *string `json:"name,omitempty"`
	// Inputs - An array of the names of the other nodes in the media graph, the outputs of which are used as input for this processor node.
	Inputs *[]MediaGraphNodeInput `json:"inputs,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphProcessor', 'TypeMicrosoftMediaMediaGraphMotionDetectionProcessor', 'TypeMicrosoftMediaMediaGraphExtensionProcessorBase', 'TypeMicrosoftMediaMediaGraphHTTPExtension', 'TypeMicrosoftMediaMediaGraphSignalGateProcessor', 'TypeMicrosoftMediaMediaGraphFrameRateFilterProcessor'
	Type TypeBasicMediaGraphProcessor `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphHTTPExtension.
func (mghe MediaGraphHTTPExtension) MarshalJSON() ([]byte, error) {
	mghe.Type = TypeMicrosoftMediaMediaGraphHTTPExtension
	objectMap := make(map[string]interface{})
	objectMap["endpoint"] = mghe.Endpoint
	if mghe.Image != nil {
		objectMap["image"] = mghe.Image
	}
	if mghe.Name != nil {
		objectMap["name"] = mghe.Name
	}
	if mghe.Inputs != nil {
		objectMap["inputs"] = mghe.Inputs
	}
	if mghe.Type != "" {
		objectMap["@type"] = mghe.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphMotionDetectionProcessor is the BasicMediaGraphProcessor implementation for MediaGraphHTTPExtension.
func (mghe MediaGraphHTTPExtension) AsMediaGraphMotionDetectionProcessor() (*MediaGraphMotionDetectionProcessor, bool) {
	return nil, false
}

// AsMediaGraphExtensionProcessorBase is the BasicMediaGraphProcessor implementation for MediaGraphHTTPExtension.
func (mghe MediaGraphHTTPExtension) AsMediaGraphExtensionProcessorBase() (*MediaGraphExtensionProcessorBase, bool) {
	return nil, false
}

// AsBasicMediaGraphExtensionProcessorBase is the BasicMediaGraphProcessor implementation for MediaGraphHTTPExtension.
func (mghe MediaGraphHTTPExtension) AsBasicMediaGraphExtensionProcessorBase() (BasicMediaGraphExtensionProcessorBase, bool) {
	return &mghe, true
}

// AsMediaGraphHTTPExtension is the BasicMediaGraphProcessor implementation for MediaGraphHTTPExtension.
func (mghe MediaGraphHTTPExtension) AsMediaGraphHTTPExtension() (*MediaGraphHTTPExtension, bool) {
	return &mghe, true
}

// AsMediaGraphSignalGateProcessor is the BasicMediaGraphProcessor implementation for MediaGraphHTTPExtension.
func (mghe MediaGraphHTTPExtension) AsMediaGraphSignalGateProcessor() (*MediaGraphSignalGateProcessor, bool) {
	return nil, false
}

// AsMediaGraphFrameRateFilterProcessor is the BasicMediaGraphProcessor implementation for MediaGraphHTTPExtension.
func (mghe MediaGraphHTTPExtension) AsMediaGraphFrameRateFilterProcessor() (*MediaGraphFrameRateFilterProcessor, bool) {
	return nil, false
}

// AsMediaGraphProcessor is the BasicMediaGraphProcessor implementation for MediaGraphHTTPExtension.
func (mghe MediaGraphHTTPExtension) AsMediaGraphProcessor() (*MediaGraphProcessor, bool) {
	return nil, false
}

// AsBasicMediaGraphProcessor is the BasicMediaGraphProcessor implementation for MediaGraphHTTPExtension.
func (mghe MediaGraphHTTPExtension) AsBasicMediaGraphProcessor() (BasicMediaGraphProcessor, bool) {
	return &mghe, true
}

// UnmarshalJSON is the custom unmarshaler for MediaGraphHTTPExtension struct.
func (mghe *MediaGraphHTTPExtension) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "endpoint":
			if v != nil {
				endpoint, err := unmarshalBasicMediaGraphEndpoint(*v)
				if err != nil {
					return err
				}
				mghe.Endpoint = endpoint
			}
		case "image":
			if v != nil {
				var imageVar MediaGraphImage
				err = json.Unmarshal(*v, &imageVar)
				if err != nil {
					return err
				}
				mghe.Image = &imageVar
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				mghe.Name = &name
			}
		case "inputs":
			if v != nil {
				var inputs []MediaGraphNodeInput
				err = json.Unmarshal(*v, &inputs)
				if err != nil {
					return err
				}
				mghe.Inputs = &inputs
			}
		case "@type":
			if v != nil {
				var typeVar TypeBasicMediaGraphProcessor
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				mghe.Type = typeVar
			}
		}
	}

	return nil
}

// MediaGraphHTTPHeaderCredentials http header service credentials.
type MediaGraphHTTPHeaderCredentials struct {
	// HeaderName - HTTP header name.
	HeaderName *string `json:"headerName,omitempty"`
	// HeaderValue - HTTP header value.
	HeaderValue *string `json:"headerValue,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphCredentials', 'TypeMicrosoftMediaMediaGraphUsernamePasswordCredentials', 'TypeMicrosoftMediaMediaGraphHTTPHeaderCredentials'
	Type TypeBasicMediaGraphCredentials `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphHTTPHeaderCredentials.
func (mghhc MediaGraphHTTPHeaderCredentials) MarshalJSON() ([]byte, error) {
	mghhc.Type = TypeMicrosoftMediaMediaGraphHTTPHeaderCredentials
	objectMap := make(map[string]interface{})
	if mghhc.HeaderName != nil {
		objectMap["headerName"] = mghhc.HeaderName
	}
	if mghhc.HeaderValue != nil {
		objectMap["headerValue"] = mghhc.HeaderValue
	}
	if mghhc.Type != "" {
		objectMap["@type"] = mghhc.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphUsernamePasswordCredentials is the BasicMediaGraphCredentials implementation for MediaGraphHTTPHeaderCredentials.
func (mghhc MediaGraphHTTPHeaderCredentials) AsMediaGraphUsernamePasswordCredentials() (*MediaGraphUsernamePasswordCredentials, bool) {
	return nil, false
}

// AsMediaGraphHTTPHeaderCredentials is the BasicMediaGraphCredentials implementation for MediaGraphHTTPHeaderCredentials.
func (mghhc MediaGraphHTTPHeaderCredentials) AsMediaGraphHTTPHeaderCredentials() (*MediaGraphHTTPHeaderCredentials, bool) {
	return &mghhc, true
}

// AsMediaGraphCredentials is the BasicMediaGraphCredentials implementation for MediaGraphHTTPHeaderCredentials.
func (mghhc MediaGraphHTTPHeaderCredentials) AsMediaGraphCredentials() (*MediaGraphCredentials, bool) {
	return nil, false
}

// AsBasicMediaGraphCredentials is the BasicMediaGraphCredentials implementation for MediaGraphHTTPHeaderCredentials.
func (mghhc MediaGraphHTTPHeaderCredentials) AsBasicMediaGraphCredentials() (BasicMediaGraphCredentials, bool) {
	return &mghhc, true
}

// MediaGraphImage describes the properties of an image frame.
type MediaGraphImage struct {
	Scale  *MediaGraphImageScale      `json:"scale,omitempty"`
	Format BasicMediaGraphImageFormat `json:"format,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for MediaGraphImage struct.
func (mgi *MediaGraphImage) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "scale":
			if v != nil {
				var scale MediaGraphImageScale
				err = json.Unmarshal(*v, &scale)
				if err != nil {
					return err
				}
				mgi.Scale = &scale
			}
		case "format":
			if v != nil {
				formatVar, err := unmarshalBasicMediaGraphImageFormat(*v)
				if err != nil {
					return err
				}
				mgi.Format = formatVar
			}
		}
	}

	return nil
}

// BasicMediaGraphImageFormat encoding settings for an image.
type BasicMediaGraphImageFormat interface {
	AsMediaGraphImageFormatRaw() (*MediaGraphImageFormatRaw, bool)
	AsMediaGraphImageFormatEncoded() (*MediaGraphImageFormatEncoded, bool)
	AsMediaGraphImageFormat() (*MediaGraphImageFormat, bool)
}

// MediaGraphImageFormat encoding settings for an image.
type MediaGraphImageFormat struct {
	// Type - Possible values include: 'TypeMicrosoftMediaMediaGraphImageFormat', 'TypeMicrosoftMediaMediaGraphImageFormatRaw', 'TypeMicrosoftMediaMediaGraphImageFormatEncoded'
	Type TypeBasicMediaGraphImageFormat `json:"@type,omitempty"`
}

func unmarshalBasicMediaGraphImageFormat(body []byte) (BasicMediaGraphImageFormat, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["@type"] {
	case string(TypeMicrosoftMediaMediaGraphImageFormatRaw):
		var mgifr MediaGraphImageFormatRaw
		err := json.Unmarshal(body, &mgifr)
		return mgifr, err
	case string(TypeMicrosoftMediaMediaGraphImageFormatEncoded):
		var mgife MediaGraphImageFormatEncoded
		err := json.Unmarshal(body, &mgife)
		return mgife, err
	default:
		var mgif MediaGraphImageFormat
		err := json.Unmarshal(body, &mgif)
		return mgif, err
	}
}
func unmarshalBasicMediaGraphImageFormatArray(body []byte) ([]BasicMediaGraphImageFormat, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	mgifArray := make([]BasicMediaGraphImageFormat, len(rawMessages))

	for index, rawMessage := range rawMessages {
		mgif, err := unmarshalBasicMediaGraphImageFormat(*rawMessage)
		if err != nil {
			return nil, err
		}
		mgifArray[index] = mgif
	}
	return mgifArray, nil
}

// MarshalJSON is the custom marshaler for MediaGraphImageFormat.
func (mgif MediaGraphImageFormat) MarshalJSON() ([]byte, error) {
	mgif.Type = TypeMicrosoftMediaMediaGraphImageFormat
	objectMap := make(map[string]interface{})
	if mgif.Type != "" {
		objectMap["@type"] = mgif.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphImageFormatRaw is the BasicMediaGraphImageFormat implementation for MediaGraphImageFormat.
func (mgif MediaGraphImageFormat) AsMediaGraphImageFormatRaw() (*MediaGraphImageFormatRaw, bool) {
	return nil, false
}

// AsMediaGraphImageFormatEncoded is the BasicMediaGraphImageFormat implementation for MediaGraphImageFormat.
func (mgif MediaGraphImageFormat) AsMediaGraphImageFormatEncoded() (*MediaGraphImageFormatEncoded, bool) {
	return nil, false
}

// AsMediaGraphImageFormat is the BasicMediaGraphImageFormat implementation for MediaGraphImageFormat.
func (mgif MediaGraphImageFormat) AsMediaGraphImageFormat() (*MediaGraphImageFormat, bool) {
	return &mgif, true
}

// AsBasicMediaGraphImageFormat is the BasicMediaGraphImageFormat implementation for MediaGraphImageFormat.
func (mgif MediaGraphImageFormat) AsBasicMediaGraphImageFormat() (BasicMediaGraphImageFormat, bool) {
	return &mgif, true
}

// MediaGraphImageFormatEncoded allowed formats for the image.
type MediaGraphImageFormatEncoded struct {
	// Encoding - The different encoding formats that can be used for the image. Possible values include: 'Jpeg', 'Bmp', 'Png'
	Encoding MediaGraphImageEncodingFormat `json:"encoding,omitempty"`
	// Quality - The image quality (used for JPEG only). Value must be between 0 to 100 (best quality).
	Quality *string `json:"quality,omitempty"`
	// Type - Possible values include: 'TypeMicrosoftMediaMediaGraphImageFormat', 'TypeMicrosoftMediaMediaGraphImageFormatRaw', 'TypeMicrosoftMediaMediaGraphImageFormatEncoded'
	Type TypeBasicMediaGraphImageFormat `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphImageFormatEncoded.
func (mgife MediaGraphImageFormatEncoded) MarshalJSON() ([]byte, error) {
	mgife.Type = TypeMicrosoftMediaMediaGraphImageFormatEncoded
	objectMap := make(map[string]interface{})
	if mgife.Encoding != "" {
		objectMap["encoding"] = mgife.Encoding
	}
	if mgife.Quality != nil {
		objectMap["quality"] = mgife.Quality
	}
	if mgife.Type != "" {
		objectMap["@type"] = mgife.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphImageFormatRaw is the BasicMediaGraphImageFormat implementation for MediaGraphImageFormatEncoded.
func (mgife MediaGraphImageFormatEncoded) AsMediaGraphImageFormatRaw() (*MediaGraphImageFormatRaw, bool) {
	return nil, false
}

// AsMediaGraphImageFormatEncoded is the BasicMediaGraphImageFormat implementation for MediaGraphImageFormatEncoded.
func (mgife MediaGraphImageFormatEncoded) AsMediaGraphImageFormatEncoded() (*MediaGraphImageFormatEncoded, bool) {
	return &mgife, true
}

// AsMediaGraphImageFormat is the BasicMediaGraphImageFormat implementation for MediaGraphImageFormatEncoded.
func (mgife MediaGraphImageFormatEncoded) AsMediaGraphImageFormat() (*MediaGraphImageFormat, bool) {
	return nil, false
}

// AsBasicMediaGraphImageFormat is the BasicMediaGraphImageFormat implementation for MediaGraphImageFormatEncoded.
func (mgife MediaGraphImageFormatEncoded) AsBasicMediaGraphImageFormat() (BasicMediaGraphImageFormat, bool) {
	return &mgife, true
}

// MediaGraphImageFormatRaw encoding settings for raw images.
type MediaGraphImageFormatRaw struct {
	// PixelFormat - Possible values include: 'Yuv420p', 'Rgb565be', 'Rgb565le', 'Rgb555be', 'Rgb555le', 'Rgb24', 'Bgr24', 'Argb', 'Rgba', 'Abgr', 'Bgra'
	PixelFormat MediaGraphImageFormatRawPixelFormat `json:"pixelFormat,omitempty"`
	// Type - Possible values include: 'TypeMicrosoftMediaMediaGraphImageFormat', 'TypeMicrosoftMediaMediaGraphImageFormatRaw', 'TypeMicrosoftMediaMediaGraphImageFormatEncoded'
	Type TypeBasicMediaGraphImageFormat `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphImageFormatRaw.
func (mgifr MediaGraphImageFormatRaw) MarshalJSON() ([]byte, error) {
	mgifr.Type = TypeMicrosoftMediaMediaGraphImageFormatRaw
	objectMap := make(map[string]interface{})
	if mgifr.PixelFormat != "" {
		objectMap["pixelFormat"] = mgifr.PixelFormat
	}
	if mgifr.Type != "" {
		objectMap["@type"] = mgifr.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphImageFormatRaw is the BasicMediaGraphImageFormat implementation for MediaGraphImageFormatRaw.
func (mgifr MediaGraphImageFormatRaw) AsMediaGraphImageFormatRaw() (*MediaGraphImageFormatRaw, bool) {
	return &mgifr, true
}

// AsMediaGraphImageFormatEncoded is the BasicMediaGraphImageFormat implementation for MediaGraphImageFormatRaw.
func (mgifr MediaGraphImageFormatRaw) AsMediaGraphImageFormatEncoded() (*MediaGraphImageFormatEncoded, bool) {
	return nil, false
}

// AsMediaGraphImageFormat is the BasicMediaGraphImageFormat implementation for MediaGraphImageFormatRaw.
func (mgifr MediaGraphImageFormatRaw) AsMediaGraphImageFormat() (*MediaGraphImageFormat, bool) {
	return nil, false
}

// AsBasicMediaGraphImageFormat is the BasicMediaGraphImageFormat implementation for MediaGraphImageFormatRaw.
func (mgifr MediaGraphImageFormatRaw) AsBasicMediaGraphImageFormat() (BasicMediaGraphImageFormat, bool) {
	return &mgifr, true
}

// MediaGraphImageScale the scaling mode for the image.
type MediaGraphImageScale struct {
	// Mode - Describes the modes for scaling an input video frame into an image, before it is sent to an inference engine. Possible values include: 'PreserveAspectRatio', 'Pad', 'Stretch'
	Mode MediaGraphImageScaleMode `json:"mode,omitempty"`
	// Width - The desired output width of the image.
	Width *string `json:"width,omitempty"`
	// Height - The desired output height of the image.
	Height *string `json:"height,omitempty"`
}

// MediaGraphInstance represents a Media Graph instance.
type MediaGraphInstance struct {
	autorest.Response `json:"-"`
	Name              *string                       `json:"name,omitempty"`
	APIVersion        *string                       `json:"@apiVersion,omitempty"`
	SystemData        *MediaGraphSystemData         `json:"systemData,omitempty"`
	Properties        *MediaGraphInstanceProperties `json:"properties,omitempty"`
}

// MediaGraphInstanceCollection collection of graph instances.
type MediaGraphInstanceCollection struct {
	autorest.Response `json:"-"`
	// Value - Collection of graph instances.
	Value *[]MediaGraphInstance `json:"value,omitempty"`
	// ContinuationToken - Continuation token to use in subsequent calls to enumerate through the graph instance collection (when the collection contains too many results to return in one response).
	ContinuationToken *string `json:"@continuationToken,omitempty"`
}

// MediaGraphInstanceProperties properties of a Media Graph instance.
type MediaGraphInstanceProperties struct {
	// Description - An optional description for the instance.
	Description *string `json:"description,omitempty"`
	// TopologyName - The name of the graph topology that this instance will run. A topology with this name should already have been set in the Edge module.
	TopologyName *string `json:"topologyName,omitempty"`
	// Parameters - List of one or more graph instance parameters.
	Parameters *[]MediaGraphParameterDefinition `json:"parameters,omitempty"`
	// State - Allowed states for a graph Instance. Possible values include: 'Inactive', 'Activating', 'Active', 'Deactivating'
	State MediaGraphInstanceState `json:"state,omitempty"`
}

// MediaGraphIoTHubMessageSink enables a graph to publish messages that can be delivered via routes
// declared in the IoT Edge deployment manifest.
type MediaGraphIoTHubMessageSink struct {
	// HubOutputName - Name of the output path to which the graph will publish message. These messages can then be delivered to desired destinations by declaring routes referencing the output path in the IoT Edge deployment manifest.
	HubOutputName *string `json:"hubOutputName,omitempty"`
	// Name - Name to be used for the media graph sink.
	Name *string `json:"name,omitempty"`
	// Inputs - An array of the names of the other nodes in the media graph, the outputs of which are used as input for this sink node.
	Inputs *[]MediaGraphNodeInput `json:"inputs,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphSink', 'TypeMicrosoftMediaMediaGraphIoTHubMessageSink', 'TypeMicrosoftMediaMediaGraphFileSink', 'TypeMicrosoftMediaMediaGraphAssetSink'
	Type TypeBasicMediaGraphSink `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphIoTHubMessageSink.
func (mgithms MediaGraphIoTHubMessageSink) MarshalJSON() ([]byte, error) {
	mgithms.Type = TypeMicrosoftMediaMediaGraphIoTHubMessageSink
	objectMap := make(map[string]interface{})
	if mgithms.HubOutputName != nil {
		objectMap["hubOutputName"] = mgithms.HubOutputName
	}
	if mgithms.Name != nil {
		objectMap["name"] = mgithms.Name
	}
	if mgithms.Inputs != nil {
		objectMap["inputs"] = mgithms.Inputs
	}
	if mgithms.Type != "" {
		objectMap["@type"] = mgithms.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphIoTHubMessageSink is the BasicMediaGraphSink implementation for MediaGraphIoTHubMessageSink.
func (mgithms MediaGraphIoTHubMessageSink) AsMediaGraphIoTHubMessageSink() (*MediaGraphIoTHubMessageSink, bool) {
	return &mgithms, true
}

// AsMediaGraphFileSink is the BasicMediaGraphSink implementation for MediaGraphIoTHubMessageSink.
func (mgithms MediaGraphIoTHubMessageSink) AsMediaGraphFileSink() (*MediaGraphFileSink, bool) {
	return nil, false
}

// AsMediaGraphAssetSink is the BasicMediaGraphSink implementation for MediaGraphIoTHubMessageSink.
func (mgithms MediaGraphIoTHubMessageSink) AsMediaGraphAssetSink() (*MediaGraphAssetSink, bool) {
	return nil, false
}

// AsMediaGraphSink is the BasicMediaGraphSink implementation for MediaGraphIoTHubMessageSink.
func (mgithms MediaGraphIoTHubMessageSink) AsMediaGraphSink() (*MediaGraphSink, bool) {
	return nil, false
}

// AsBasicMediaGraphSink is the BasicMediaGraphSink implementation for MediaGraphIoTHubMessageSink.
func (mgithms MediaGraphIoTHubMessageSink) AsBasicMediaGraphSink() (BasicMediaGraphSink, bool) {
	return &mgithms, true
}

// MediaGraphIoTHubMessageSource enables a graph to receive messages via routes declared in the IoT Edge
// deployment manifest.
type MediaGraphIoTHubMessageSource struct {
	// HubInputName - Name of the input path where messages can be routed to (via routes declared in the IoT Edge deployment manifest).
	HubInputName *string `json:"hubInputName,omitempty"`
	// Name - The name to be used for this source node.
	Name *string `json:"name,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphSource', 'TypeMicrosoftMediaMediaGraphRtspSource', 'TypeMicrosoftMediaMediaGraphIoTHubMessageSource'
	Type Type `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphIoTHubMessageSource.
func (mgithms MediaGraphIoTHubMessageSource) MarshalJSON() ([]byte, error) {
	mgithms.Type = TypeMicrosoftMediaMediaGraphIoTHubMessageSource
	objectMap := make(map[string]interface{})
	if mgithms.HubInputName != nil {
		objectMap["hubInputName"] = mgithms.HubInputName
	}
	if mgithms.Name != nil {
		objectMap["name"] = mgithms.Name
	}
	if mgithms.Type != "" {
		objectMap["@type"] = mgithms.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphRtspSource is the BasicMediaGraphSource implementation for MediaGraphIoTHubMessageSource.
func (mgithms MediaGraphIoTHubMessageSource) AsMediaGraphRtspSource() (*MediaGraphRtspSource, bool) {
	return nil, false
}

// AsMediaGraphIoTHubMessageSource is the BasicMediaGraphSource implementation for MediaGraphIoTHubMessageSource.
func (mgithms MediaGraphIoTHubMessageSource) AsMediaGraphIoTHubMessageSource() (*MediaGraphIoTHubMessageSource, bool) {
	return &mgithms, true
}

// AsMediaGraphSource is the BasicMediaGraphSource implementation for MediaGraphIoTHubMessageSource.
func (mgithms MediaGraphIoTHubMessageSource) AsMediaGraphSource() (*MediaGraphSource, bool) {
	return nil, false
}

// AsBasicMediaGraphSource is the BasicMediaGraphSource implementation for MediaGraphIoTHubMessageSource.
func (mgithms MediaGraphIoTHubMessageSource) AsBasicMediaGraphSource() (BasicMediaGraphSource, bool) {
	return &mgithms, true
}

// MediaGraphMotionDetectionProcessor a node that accepts raw video as input, and detects if there are
// moving objects present. If so, then it emits an event, and allows frames where motion was detected to
// pass through. Other frames are blocked/dropped.
type MediaGraphMotionDetectionProcessor struct {
	// Sensitivity - Enumeration that specifies the sensitivity of the motion detection processor. Possible values include: 'Low', 'Medium', 'High'
	Sensitivity MediaGraphMotionDetectionSensitivity `json:"sensitivity,omitempty"`
	// OutputMotionRegion - Indicates whether the processor should detect and output the regions, within the video frame, where motion was detected. Default is true.
	OutputMotionRegion *bool `json:"outputMotionRegion,omitempty"`
	// Name - The name for this processor node.
	Name *string `json:"name,omitempty"`
	// Inputs - An array of the names of the other nodes in the media graph, the outputs of which are used as input for this processor node.
	Inputs *[]MediaGraphNodeInput `json:"inputs,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphProcessor', 'TypeMicrosoftMediaMediaGraphMotionDetectionProcessor', 'TypeMicrosoftMediaMediaGraphExtensionProcessorBase', 'TypeMicrosoftMediaMediaGraphHTTPExtension', 'TypeMicrosoftMediaMediaGraphSignalGateProcessor', 'TypeMicrosoftMediaMediaGraphFrameRateFilterProcessor'
	Type TypeBasicMediaGraphProcessor `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphMotionDetectionProcessor.
func (mgmdp MediaGraphMotionDetectionProcessor) MarshalJSON() ([]byte, error) {
	mgmdp.Type = TypeMicrosoftMediaMediaGraphMotionDetectionProcessor
	objectMap := make(map[string]interface{})
	if mgmdp.Sensitivity != "" {
		objectMap["sensitivity"] = mgmdp.Sensitivity
	}
	if mgmdp.OutputMotionRegion != nil {
		objectMap["outputMotionRegion"] = mgmdp.OutputMotionRegion
	}
	if mgmdp.Name != nil {
		objectMap["name"] = mgmdp.Name
	}
	if mgmdp.Inputs != nil {
		objectMap["inputs"] = mgmdp.Inputs
	}
	if mgmdp.Type != "" {
		objectMap["@type"] = mgmdp.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphMotionDetectionProcessor is the BasicMediaGraphProcessor implementation for MediaGraphMotionDetectionProcessor.
func (mgmdp MediaGraphMotionDetectionProcessor) AsMediaGraphMotionDetectionProcessor() (*MediaGraphMotionDetectionProcessor, bool) {
	return &mgmdp, true
}

// AsMediaGraphExtensionProcessorBase is the BasicMediaGraphProcessor implementation for MediaGraphMotionDetectionProcessor.
func (mgmdp MediaGraphMotionDetectionProcessor) AsMediaGraphExtensionProcessorBase() (*MediaGraphExtensionProcessorBase, bool) {
	return nil, false
}

// AsBasicMediaGraphExtensionProcessorBase is the BasicMediaGraphProcessor implementation for MediaGraphMotionDetectionProcessor.
func (mgmdp MediaGraphMotionDetectionProcessor) AsBasicMediaGraphExtensionProcessorBase() (BasicMediaGraphExtensionProcessorBase, bool) {
	return nil, false
}

// AsMediaGraphHTTPExtension is the BasicMediaGraphProcessor implementation for MediaGraphMotionDetectionProcessor.
func (mgmdp MediaGraphMotionDetectionProcessor) AsMediaGraphHTTPExtension() (*MediaGraphHTTPExtension, bool) {
	return nil, false
}

// AsMediaGraphSignalGateProcessor is the BasicMediaGraphProcessor implementation for MediaGraphMotionDetectionProcessor.
func (mgmdp MediaGraphMotionDetectionProcessor) AsMediaGraphSignalGateProcessor() (*MediaGraphSignalGateProcessor, bool) {
	return nil, false
}

// AsMediaGraphFrameRateFilterProcessor is the BasicMediaGraphProcessor implementation for MediaGraphMotionDetectionProcessor.
func (mgmdp MediaGraphMotionDetectionProcessor) AsMediaGraphFrameRateFilterProcessor() (*MediaGraphFrameRateFilterProcessor, bool) {
	return nil, false
}

// AsMediaGraphProcessor is the BasicMediaGraphProcessor implementation for MediaGraphMotionDetectionProcessor.
func (mgmdp MediaGraphMotionDetectionProcessor) AsMediaGraphProcessor() (*MediaGraphProcessor, bool) {
	return nil, false
}

// AsBasicMediaGraphProcessor is the BasicMediaGraphProcessor implementation for MediaGraphMotionDetectionProcessor.
func (mgmdp MediaGraphMotionDetectionProcessor) AsBasicMediaGraphProcessor() (BasicMediaGraphProcessor, bool) {
	return &mgmdp, true
}

// MediaGraphNodeInput represents the input to any node in a media graph.
type MediaGraphNodeInput struct {
	// NodeName - The name of another node in the media graph, the output of which is used as input to this node.
	NodeName *string `json:"nodeName,omitempty"`
	// OutputSelectors - Allows for the selection of particular streams from another node.
	OutputSelectors *[]MediaGraphOutputSelector `json:"outputSelectors,omitempty"`
}

// MediaGraphOutputSelector allows for the selection of particular streams from another node.
type MediaGraphOutputSelector struct {
	// Property - The stream property to compare with. Possible values include: 'MediaType'
	Property MediaGraphOutputSelectorProperty `json:"property,omitempty"`
	// Operator - The operator to compare streams by. Possible values include: 'Is', 'IsNot'
	Operator MediaGraphOutputSelectorOperator `json:"operator,omitempty"`
	// Value - Value to compare against.
	Value *string `json:"value,omitempty"`
}

// MediaGraphParameterDeclaration the declaration of a parameter in the graph topology. A graph topology
// can be authored with parameters. Then, during graph instance creation, the value for those parameters
// can be specified. This allows the same graph topology to be used as a blueprint for multiple graph
// instances with different values for the parameters.
type MediaGraphParameterDeclaration struct {
	// Name - The name of the parameter.
	Name *string `json:"name,omitempty"`
	// Type - Possible values include: 'String', 'SecretString', 'Int', 'Double', 'Bool'
	Type MediaGraphParameterType `json:"type,omitempty"`
	// Description - Description of the parameter.
	Description *string `json:"description,omitempty"`
	// Default - The default value for the parameter, to be used if the graph instance does not specify a value.
	Default *string `json:"default,omitempty"`
}

// MediaGraphParameterDefinition a key, value pair. The graph topology can be authored with certain values
// with parameters. Then, during graph instance creation, the value for that parameters can be specified.
// This allows the same graph topology to be used as a blueprint for multiple graph instances with
// different values for the parameters.
type MediaGraphParameterDefinition struct {
	// Name - Name of parameter as defined in the graph topology.
	Name *string `json:"name,omitempty"`
	// Value - Value of parameter.
	Value *string `json:"value,omitempty"`
}

// MediaGraphPemCertificateList a list of PEM formatted certificates.
type MediaGraphPemCertificateList struct {
	// Certificates - PEM formatted public certificates one per entry.
	Certificates *[]string `json:"certificates,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphCertificateSource', 'TypeMicrosoftMediaMediaGraphPemCertificateList'
	Type TypeBasicMediaGraphCertificateSource `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphPemCertificateList.
func (mgpcl MediaGraphPemCertificateList) MarshalJSON() ([]byte, error) {
	mgpcl.Type = TypeMicrosoftMediaMediaGraphPemCertificateList
	objectMap := make(map[string]interface{})
	if mgpcl.Certificates != nil {
		objectMap["certificates"] = mgpcl.Certificates
	}
	if mgpcl.Type != "" {
		objectMap["@type"] = mgpcl.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphPemCertificateList is the BasicMediaGraphCertificateSource implementation for MediaGraphPemCertificateList.
func (mgpcl MediaGraphPemCertificateList) AsMediaGraphPemCertificateList() (*MediaGraphPemCertificateList, bool) {
	return &mgpcl, true
}

// AsMediaGraphCertificateSource is the BasicMediaGraphCertificateSource implementation for MediaGraphPemCertificateList.
func (mgpcl MediaGraphPemCertificateList) AsMediaGraphCertificateSource() (*MediaGraphCertificateSource, bool) {
	return nil, false
}

// AsBasicMediaGraphCertificateSource is the BasicMediaGraphCertificateSource implementation for MediaGraphPemCertificateList.
func (mgpcl MediaGraphPemCertificateList) AsBasicMediaGraphCertificateSource() (BasicMediaGraphCertificateSource, bool) {
	return &mgpcl, true
}

// BasicMediaGraphProcessor a node that represents the desired processing of media in a graph. Takes media and/or
// events as inputs, and emits media and/or event as output.
type BasicMediaGraphProcessor interface {
	AsMediaGraphMotionDetectionProcessor() (*MediaGraphMotionDetectionProcessor, bool)
	AsMediaGraphExtensionProcessorBase() (*MediaGraphExtensionProcessorBase, bool)
	AsBasicMediaGraphExtensionProcessorBase() (BasicMediaGraphExtensionProcessorBase, bool)
	AsMediaGraphHTTPExtension() (*MediaGraphHTTPExtension, bool)
	AsMediaGraphSignalGateProcessor() (*MediaGraphSignalGateProcessor, bool)
	AsMediaGraphFrameRateFilterProcessor() (*MediaGraphFrameRateFilterProcessor, bool)
	AsMediaGraphProcessor() (*MediaGraphProcessor, bool)
}

// MediaGraphProcessor a node that represents the desired processing of media in a graph. Takes media and/or
// events as inputs, and emits media and/or event as output.
type MediaGraphProcessor struct {
	// Name - The name for this processor node.
	Name *string `json:"name,omitempty"`
	// Inputs - An array of the names of the other nodes in the media graph, the outputs of which are used as input for this processor node.
	Inputs *[]MediaGraphNodeInput `json:"inputs,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphProcessor', 'TypeMicrosoftMediaMediaGraphMotionDetectionProcessor', 'TypeMicrosoftMediaMediaGraphExtensionProcessorBase', 'TypeMicrosoftMediaMediaGraphHTTPExtension', 'TypeMicrosoftMediaMediaGraphSignalGateProcessor', 'TypeMicrosoftMediaMediaGraphFrameRateFilterProcessor'
	Type TypeBasicMediaGraphProcessor `json:"@type,omitempty"`
}

func unmarshalBasicMediaGraphProcessor(body []byte) (BasicMediaGraphProcessor, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["@type"] {
	case string(TypeMicrosoftMediaMediaGraphMotionDetectionProcessor):
		var mgmdp MediaGraphMotionDetectionProcessor
		err := json.Unmarshal(body, &mgmdp)
		return mgmdp, err
	case string(TypeMicrosoftMediaMediaGraphExtensionProcessorBase):
		var mgepb MediaGraphExtensionProcessorBase
		err := json.Unmarshal(body, &mgepb)
		return mgepb, err
	case string(TypeMicrosoftMediaMediaGraphHTTPExtension):
		var mghe MediaGraphHTTPExtension
		err := json.Unmarshal(body, &mghe)
		return mghe, err
	case string(TypeMicrosoftMediaMediaGraphSignalGateProcessor):
		var mgsgp MediaGraphSignalGateProcessor
		err := json.Unmarshal(body, &mgsgp)
		return mgsgp, err
	case string(TypeMicrosoftMediaMediaGraphFrameRateFilterProcessor):
		var mgfrfp MediaGraphFrameRateFilterProcessor
		err := json.Unmarshal(body, &mgfrfp)
		return mgfrfp, err
	default:
		var mgp MediaGraphProcessor
		err := json.Unmarshal(body, &mgp)
		return mgp, err
	}
}
func unmarshalBasicMediaGraphProcessorArray(body []byte) ([]BasicMediaGraphProcessor, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	mgpArray := make([]BasicMediaGraphProcessor, len(rawMessages))

	for index, rawMessage := range rawMessages {
		mgp, err := unmarshalBasicMediaGraphProcessor(*rawMessage)
		if err != nil {
			return nil, err
		}
		mgpArray[index] = mgp
	}
	return mgpArray, nil
}

// MarshalJSON is the custom marshaler for MediaGraphProcessor.
func (mgp MediaGraphProcessor) MarshalJSON() ([]byte, error) {
	mgp.Type = TypeMediaGraphProcessor
	objectMap := make(map[string]interface{})
	if mgp.Name != nil {
		objectMap["name"] = mgp.Name
	}
	if mgp.Inputs != nil {
		objectMap["inputs"] = mgp.Inputs
	}
	if mgp.Type != "" {
		objectMap["@type"] = mgp.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphMotionDetectionProcessor is the BasicMediaGraphProcessor implementation for MediaGraphProcessor.
func (mgp MediaGraphProcessor) AsMediaGraphMotionDetectionProcessor() (*MediaGraphMotionDetectionProcessor, bool) {
	return nil, false
}

// AsMediaGraphExtensionProcessorBase is the BasicMediaGraphProcessor implementation for MediaGraphProcessor.
func (mgp MediaGraphProcessor) AsMediaGraphExtensionProcessorBase() (*MediaGraphExtensionProcessorBase, bool) {
	return nil, false
}

// AsBasicMediaGraphExtensionProcessorBase is the BasicMediaGraphProcessor implementation for MediaGraphProcessor.
func (mgp MediaGraphProcessor) AsBasicMediaGraphExtensionProcessorBase() (BasicMediaGraphExtensionProcessorBase, bool) {
	return nil, false
}

// AsMediaGraphHTTPExtension is the BasicMediaGraphProcessor implementation for MediaGraphProcessor.
func (mgp MediaGraphProcessor) AsMediaGraphHTTPExtension() (*MediaGraphHTTPExtension, bool) {
	return nil, false
}

// AsMediaGraphSignalGateProcessor is the BasicMediaGraphProcessor implementation for MediaGraphProcessor.
func (mgp MediaGraphProcessor) AsMediaGraphSignalGateProcessor() (*MediaGraphSignalGateProcessor, bool) {
	return nil, false
}

// AsMediaGraphFrameRateFilterProcessor is the BasicMediaGraphProcessor implementation for MediaGraphProcessor.
func (mgp MediaGraphProcessor) AsMediaGraphFrameRateFilterProcessor() (*MediaGraphFrameRateFilterProcessor, bool) {
	return nil, false
}

// AsMediaGraphProcessor is the BasicMediaGraphProcessor implementation for MediaGraphProcessor.
func (mgp MediaGraphProcessor) AsMediaGraphProcessor() (*MediaGraphProcessor, bool) {
	return &mgp, true
}

// AsBasicMediaGraphProcessor is the BasicMediaGraphProcessor implementation for MediaGraphProcessor.
func (mgp MediaGraphProcessor) AsBasicMediaGraphProcessor() (BasicMediaGraphProcessor, bool) {
	return &mgp, true
}

// MediaGraphRtspSource enables a graph to capture media from a RTSP server.
type MediaGraphRtspSource struct {
	// Transport - Underlying RTSP transport. This is used to enable or disable HTTP tunneling. Possible values include: 'HTTP', 'TCP'
	Transport MediaGraphRtspTransport `json:"transport,omitempty"`
	// Endpoint - RTSP endpoint of the stream that is being connected to.
	Endpoint BasicMediaGraphEndpoint `json:"endpoint,omitempty"`
	// Name - The name to be used for this source node.
	Name *string `json:"name,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphSource', 'TypeMicrosoftMediaMediaGraphRtspSource', 'TypeMicrosoftMediaMediaGraphIoTHubMessageSource'
	Type Type `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphRtspSource.
func (mgrs MediaGraphRtspSource) MarshalJSON() ([]byte, error) {
	mgrs.Type = TypeMicrosoftMediaMediaGraphRtspSource
	objectMap := make(map[string]interface{})
	if mgrs.Transport != "" {
		objectMap["transport"] = mgrs.Transport
	}
	objectMap["endpoint"] = mgrs.Endpoint
	if mgrs.Name != nil {
		objectMap["name"] = mgrs.Name
	}
	if mgrs.Type != "" {
		objectMap["@type"] = mgrs.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphRtspSource is the BasicMediaGraphSource implementation for MediaGraphRtspSource.
func (mgrs MediaGraphRtspSource) AsMediaGraphRtspSource() (*MediaGraphRtspSource, bool) {
	return &mgrs, true
}

// AsMediaGraphIoTHubMessageSource is the BasicMediaGraphSource implementation for MediaGraphRtspSource.
func (mgrs MediaGraphRtspSource) AsMediaGraphIoTHubMessageSource() (*MediaGraphIoTHubMessageSource, bool) {
	return nil, false
}

// AsMediaGraphSource is the BasicMediaGraphSource implementation for MediaGraphRtspSource.
func (mgrs MediaGraphRtspSource) AsMediaGraphSource() (*MediaGraphSource, bool) {
	return nil, false
}

// AsBasicMediaGraphSource is the BasicMediaGraphSource implementation for MediaGraphRtspSource.
func (mgrs MediaGraphRtspSource) AsBasicMediaGraphSource() (BasicMediaGraphSource, bool) {
	return &mgrs, true
}

// UnmarshalJSON is the custom unmarshaler for MediaGraphRtspSource struct.
func (mgrs *MediaGraphRtspSource) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "transport":
			if v != nil {
				var transport MediaGraphRtspTransport
				err = json.Unmarshal(*v, &transport)
				if err != nil {
					return err
				}
				mgrs.Transport = transport
			}
		case "endpoint":
			if v != nil {
				endpoint, err := unmarshalBasicMediaGraphEndpoint(*v)
				if err != nil {
					return err
				}
				mgrs.Endpoint = endpoint
			}
		case "name":
			if v != nil {
				var name string
				err = json.Unmarshal(*v, &name)
				if err != nil {
					return err
				}
				mgrs.Name = &name
			}
		case "@type":
			if v != nil {
				var typeVar Type
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				mgrs.Type = typeVar
			}
		}
	}

	return nil
}

// MediaGraphSignalGateProcessor a signal gate determines when to block (gate) incoming media, and when to
// allow it through. It gathers input events over the activationEvaluationWindow, and determines whether to
// open or close the gate.
type MediaGraphSignalGateProcessor struct {
	// ActivationEvaluationWindow - The period of time over which the gate gathers input events, before evaluating them.
	ActivationEvaluationWindow *string `json:"activationEvaluationWindow,omitempty"`
	// ActivationSignalOffset - Signal offset once the gate is activated (can be negative). It is an offset between the time the event is received, and the timestamp of the first media sample (eg. video frame) that is allowed through by the gate.
	ActivationSignalOffset *string `json:"activationSignalOffset,omitempty"`
	// MinimumActivationTime - The minimum period for which the gate remains open, in the absence of subsequent triggers (events).
	MinimumActivationTime *string `json:"minimumActivationTime,omitempty"`
	// MaximumActivationTime - The maximum period for which the gate remains open, in the presence of subsequent events.
	MaximumActivationTime *string `json:"maximumActivationTime,omitempty"`
	// Name - The name for this processor node.
	Name *string `json:"name,omitempty"`
	// Inputs - An array of the names of the other nodes in the media graph, the outputs of which are used as input for this processor node.
	Inputs *[]MediaGraphNodeInput `json:"inputs,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphProcessor', 'TypeMicrosoftMediaMediaGraphMotionDetectionProcessor', 'TypeMicrosoftMediaMediaGraphExtensionProcessorBase', 'TypeMicrosoftMediaMediaGraphHTTPExtension', 'TypeMicrosoftMediaMediaGraphSignalGateProcessor', 'TypeMicrosoftMediaMediaGraphFrameRateFilterProcessor'
	Type TypeBasicMediaGraphProcessor `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphSignalGateProcessor.
func (mgsgp MediaGraphSignalGateProcessor) MarshalJSON() ([]byte, error) {
	mgsgp.Type = TypeMicrosoftMediaMediaGraphSignalGateProcessor
	objectMap := make(map[string]interface{})
	if mgsgp.ActivationEvaluationWindow != nil {
		objectMap["activationEvaluationWindow"] = mgsgp.ActivationEvaluationWindow
	}
	if mgsgp.ActivationSignalOffset != nil {
		objectMap["activationSignalOffset"] = mgsgp.ActivationSignalOffset
	}
	if mgsgp.MinimumActivationTime != nil {
		objectMap["minimumActivationTime"] = mgsgp.MinimumActivationTime
	}
	if mgsgp.MaximumActivationTime != nil {
		objectMap["maximumActivationTime"] = mgsgp.MaximumActivationTime
	}
	if mgsgp.Name != nil {
		objectMap["name"] = mgsgp.Name
	}
	if mgsgp.Inputs != nil {
		objectMap["inputs"] = mgsgp.Inputs
	}
	if mgsgp.Type != "" {
		objectMap["@type"] = mgsgp.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphMotionDetectionProcessor is the BasicMediaGraphProcessor implementation for MediaGraphSignalGateProcessor.
func (mgsgp MediaGraphSignalGateProcessor) AsMediaGraphMotionDetectionProcessor() (*MediaGraphMotionDetectionProcessor, bool) {
	return nil, false
}

// AsMediaGraphExtensionProcessorBase is the BasicMediaGraphProcessor implementation for MediaGraphSignalGateProcessor.
func (mgsgp MediaGraphSignalGateProcessor) AsMediaGraphExtensionProcessorBase() (*MediaGraphExtensionProcessorBase, bool) {
	return nil, false
}

// AsBasicMediaGraphExtensionProcessorBase is the BasicMediaGraphProcessor implementation for MediaGraphSignalGateProcessor.
func (mgsgp MediaGraphSignalGateProcessor) AsBasicMediaGraphExtensionProcessorBase() (BasicMediaGraphExtensionProcessorBase, bool) {
	return nil, false
}

// AsMediaGraphHTTPExtension is the BasicMediaGraphProcessor implementation for MediaGraphSignalGateProcessor.
func (mgsgp MediaGraphSignalGateProcessor) AsMediaGraphHTTPExtension() (*MediaGraphHTTPExtension, bool) {
	return nil, false
}

// AsMediaGraphSignalGateProcessor is the BasicMediaGraphProcessor implementation for MediaGraphSignalGateProcessor.
func (mgsgp MediaGraphSignalGateProcessor) AsMediaGraphSignalGateProcessor() (*MediaGraphSignalGateProcessor, bool) {
	return &mgsgp, true
}

// AsMediaGraphFrameRateFilterProcessor is the BasicMediaGraphProcessor implementation for MediaGraphSignalGateProcessor.
func (mgsgp MediaGraphSignalGateProcessor) AsMediaGraphFrameRateFilterProcessor() (*MediaGraphFrameRateFilterProcessor, bool) {
	return nil, false
}

// AsMediaGraphProcessor is the BasicMediaGraphProcessor implementation for MediaGraphSignalGateProcessor.
func (mgsgp MediaGraphSignalGateProcessor) AsMediaGraphProcessor() (*MediaGraphProcessor, bool) {
	return nil, false
}

// AsBasicMediaGraphProcessor is the BasicMediaGraphProcessor implementation for MediaGraphSignalGateProcessor.
func (mgsgp MediaGraphSignalGateProcessor) AsBasicMediaGraphProcessor() (BasicMediaGraphProcessor, bool) {
	return &mgsgp, true
}

// BasicMediaGraphSink enables a media graph to write media data to a destination outside of the Live Video Analytics
// IoT Edge module.
type BasicMediaGraphSink interface {
	AsMediaGraphIoTHubMessageSink() (*MediaGraphIoTHubMessageSink, bool)
	AsMediaGraphFileSink() (*MediaGraphFileSink, bool)
	AsMediaGraphAssetSink() (*MediaGraphAssetSink, bool)
	AsMediaGraphSink() (*MediaGraphSink, bool)
}

// MediaGraphSink enables a media graph to write media data to a destination outside of the Live Video
// Analytics IoT Edge module.
type MediaGraphSink struct {
	// Name - Name to be used for the media graph sink.
	Name *string `json:"name,omitempty"`
	// Inputs - An array of the names of the other nodes in the media graph, the outputs of which are used as input for this sink node.
	Inputs *[]MediaGraphNodeInput `json:"inputs,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphSink', 'TypeMicrosoftMediaMediaGraphIoTHubMessageSink', 'TypeMicrosoftMediaMediaGraphFileSink', 'TypeMicrosoftMediaMediaGraphAssetSink'
	Type TypeBasicMediaGraphSink `json:"@type,omitempty"`
}

func unmarshalBasicMediaGraphSink(body []byte) (BasicMediaGraphSink, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["@type"] {
	case string(TypeMicrosoftMediaMediaGraphIoTHubMessageSink):
		var mgithms MediaGraphIoTHubMessageSink
		err := json.Unmarshal(body, &mgithms)
		return mgithms, err
	case string(TypeMicrosoftMediaMediaGraphFileSink):
		var mgfs MediaGraphFileSink
		err := json.Unmarshal(body, &mgfs)
		return mgfs, err
	case string(TypeMicrosoftMediaMediaGraphAssetSink):
		var mgas MediaGraphAssetSink
		err := json.Unmarshal(body, &mgas)
		return mgas, err
	default:
		var mgs MediaGraphSink
		err := json.Unmarshal(body, &mgs)
		return mgs, err
	}
}
func unmarshalBasicMediaGraphSinkArray(body []byte) ([]BasicMediaGraphSink, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	mgsArray := make([]BasicMediaGraphSink, len(rawMessages))

	for index, rawMessage := range rawMessages {
		mgs, err := unmarshalBasicMediaGraphSink(*rawMessage)
		if err != nil {
			return nil, err
		}
		mgsArray[index] = mgs
	}
	return mgsArray, nil
}

// MarshalJSON is the custom marshaler for MediaGraphSink.
func (mgs MediaGraphSink) MarshalJSON() ([]byte, error) {
	mgs.Type = TypeMediaGraphSink
	objectMap := make(map[string]interface{})
	if mgs.Name != nil {
		objectMap["name"] = mgs.Name
	}
	if mgs.Inputs != nil {
		objectMap["inputs"] = mgs.Inputs
	}
	if mgs.Type != "" {
		objectMap["@type"] = mgs.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphIoTHubMessageSink is the BasicMediaGraphSink implementation for MediaGraphSink.
func (mgs MediaGraphSink) AsMediaGraphIoTHubMessageSink() (*MediaGraphIoTHubMessageSink, bool) {
	return nil, false
}

// AsMediaGraphFileSink is the BasicMediaGraphSink implementation for MediaGraphSink.
func (mgs MediaGraphSink) AsMediaGraphFileSink() (*MediaGraphFileSink, bool) {
	return nil, false
}

// AsMediaGraphAssetSink is the BasicMediaGraphSink implementation for MediaGraphSink.
func (mgs MediaGraphSink) AsMediaGraphAssetSink() (*MediaGraphAssetSink, bool) {
	return nil, false
}

// AsMediaGraphSink is the BasicMediaGraphSink implementation for MediaGraphSink.
func (mgs MediaGraphSink) AsMediaGraphSink() (*MediaGraphSink, bool) {
	return &mgs, true
}

// AsBasicMediaGraphSink is the BasicMediaGraphSink implementation for MediaGraphSink.
func (mgs MediaGraphSink) AsBasicMediaGraphSink() (BasicMediaGraphSink, bool) {
	return &mgs, true
}

// BasicMediaGraphSource media graph source.
type BasicMediaGraphSource interface {
	AsMediaGraphRtspSource() (*MediaGraphRtspSource, bool)
	AsMediaGraphIoTHubMessageSource() (*MediaGraphIoTHubMessageSource, bool)
	AsMediaGraphSource() (*MediaGraphSource, bool)
}

// MediaGraphSource media graph source.
type MediaGraphSource struct {
	// Name - The name to be used for this source node.
	Name *string `json:"name,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphSource', 'TypeMicrosoftMediaMediaGraphRtspSource', 'TypeMicrosoftMediaMediaGraphIoTHubMessageSource'
	Type Type `json:"@type,omitempty"`
}

func unmarshalBasicMediaGraphSource(body []byte) (BasicMediaGraphSource, error) {
	var m map[string]interface{}
	err := json.Unmarshal(body, &m)
	if err != nil {
		return nil, err
	}

	switch m["@type"] {
	case string(TypeMicrosoftMediaMediaGraphRtspSource):
		var mgrs MediaGraphRtspSource
		err := json.Unmarshal(body, &mgrs)
		return mgrs, err
	case string(TypeMicrosoftMediaMediaGraphIoTHubMessageSource):
		var mgithms MediaGraphIoTHubMessageSource
		err := json.Unmarshal(body, &mgithms)
		return mgithms, err
	default:
		var mgs MediaGraphSource
		err := json.Unmarshal(body, &mgs)
		return mgs, err
	}
}
func unmarshalBasicMediaGraphSourceArray(body []byte) ([]BasicMediaGraphSource, error) {
	var rawMessages []*json.RawMessage
	err := json.Unmarshal(body, &rawMessages)
	if err != nil {
		return nil, err
	}

	mgsArray := make([]BasicMediaGraphSource, len(rawMessages))

	for index, rawMessage := range rawMessages {
		mgs, err := unmarshalBasicMediaGraphSource(*rawMessage)
		if err != nil {
			return nil, err
		}
		mgsArray[index] = mgs
	}
	return mgsArray, nil
}

// MarshalJSON is the custom marshaler for MediaGraphSource.
func (mgs MediaGraphSource) MarshalJSON() ([]byte, error) {
	mgs.Type = TypeMediaGraphSource
	objectMap := make(map[string]interface{})
	if mgs.Name != nil {
		objectMap["name"] = mgs.Name
	}
	if mgs.Type != "" {
		objectMap["@type"] = mgs.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphRtspSource is the BasicMediaGraphSource implementation for MediaGraphSource.
func (mgs MediaGraphSource) AsMediaGraphRtspSource() (*MediaGraphRtspSource, bool) {
	return nil, false
}

// AsMediaGraphIoTHubMessageSource is the BasicMediaGraphSource implementation for MediaGraphSource.
func (mgs MediaGraphSource) AsMediaGraphIoTHubMessageSource() (*MediaGraphIoTHubMessageSource, bool) {
	return nil, false
}

// AsMediaGraphSource is the BasicMediaGraphSource implementation for MediaGraphSource.
func (mgs MediaGraphSource) AsMediaGraphSource() (*MediaGraphSource, bool) {
	return &mgs, true
}

// AsBasicMediaGraphSource is the BasicMediaGraphSource implementation for MediaGraphSource.
func (mgs MediaGraphSource) AsBasicMediaGraphSource() (BasicMediaGraphSource, bool) {
	return &mgs, true
}

// MediaGraphSystemData graph system data.
type MediaGraphSystemData struct {
	// CreatedAt - The timestamp of resource creation (UTC).
	CreatedAt *date.Time `json:"createdAt,omitempty"`
	// LastModifiedAt - The timestamp of resource last modification (UTC).
	LastModifiedAt *date.Time `json:"lastModifiedAt,omitempty"`
}

// MediaGraphTLSEndpoint an endpoint that the graph can connect to, which must be connected over TLS/SSL.
type MediaGraphTLSEndpoint struct {
	// TrustedCertificates - Trusted certificates when authenticating a TLS connection. Null designates that Azure Media Service's source of trust should be used.
	TrustedCertificates BasicMediaGraphCertificateSource `json:"trustedCertificates,omitempty"`
	// ValidationOptions - Validation options to use when authenticating a TLS connection. By default, strict validation is used.
	ValidationOptions *MediaGraphTLSValidationOptions `json:"validationOptions,omitempty"`
	// Credentials - Polymorphic credentials to be presented to the endpoint.
	Credentials BasicMediaGraphCredentials `json:"credentials,omitempty"`
	// URL - Url for the endpoint.
	URL *string `json:"url,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphEndpoint', 'TypeMicrosoftMediaMediaGraphUnsecuredEndpoint', 'TypeMicrosoftMediaMediaGraphTLSEndpoint'
	Type TypeBasicMediaGraphEndpoint `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphTLSEndpoint.
func (mgte MediaGraphTLSEndpoint) MarshalJSON() ([]byte, error) {
	mgte.Type = TypeMicrosoftMediaMediaGraphTLSEndpoint
	objectMap := make(map[string]interface{})
	objectMap["trustedCertificates"] = mgte.TrustedCertificates
	if mgte.ValidationOptions != nil {
		objectMap["validationOptions"] = mgte.ValidationOptions
	}
	objectMap["credentials"] = mgte.Credentials
	if mgte.URL != nil {
		objectMap["url"] = mgte.URL
	}
	if mgte.Type != "" {
		objectMap["@type"] = mgte.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphUnsecuredEndpoint is the BasicMediaGraphEndpoint implementation for MediaGraphTLSEndpoint.
func (mgte MediaGraphTLSEndpoint) AsMediaGraphUnsecuredEndpoint() (*MediaGraphUnsecuredEndpoint, bool) {
	return nil, false
}

// AsMediaGraphTLSEndpoint is the BasicMediaGraphEndpoint implementation for MediaGraphTLSEndpoint.
func (mgte MediaGraphTLSEndpoint) AsMediaGraphTLSEndpoint() (*MediaGraphTLSEndpoint, bool) {
	return &mgte, true
}

// AsMediaGraphEndpoint is the BasicMediaGraphEndpoint implementation for MediaGraphTLSEndpoint.
func (mgte MediaGraphTLSEndpoint) AsMediaGraphEndpoint() (*MediaGraphEndpoint, bool) {
	return nil, false
}

// AsBasicMediaGraphEndpoint is the BasicMediaGraphEndpoint implementation for MediaGraphTLSEndpoint.
func (mgte MediaGraphTLSEndpoint) AsBasicMediaGraphEndpoint() (BasicMediaGraphEndpoint, bool) {
	return &mgte, true
}

// UnmarshalJSON is the custom unmarshaler for MediaGraphTLSEndpoint struct.
func (mgte *MediaGraphTLSEndpoint) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "trustedCertificates":
			if v != nil {
				trustedCertificates, err := unmarshalBasicMediaGraphCertificateSource(*v)
				if err != nil {
					return err
				}
				mgte.TrustedCertificates = trustedCertificates
			}
		case "validationOptions":
			if v != nil {
				var validationOptions MediaGraphTLSValidationOptions
				err = json.Unmarshal(*v, &validationOptions)
				if err != nil {
					return err
				}
				mgte.ValidationOptions = &validationOptions
			}
		case "credentials":
			if v != nil {
				credentials, err := unmarshalBasicMediaGraphCredentials(*v)
				if err != nil {
					return err
				}
				mgte.Credentials = credentials
			}
		case "url":
			if v != nil {
				var URL string
				err = json.Unmarshal(*v, &URL)
				if err != nil {
					return err
				}
				mgte.URL = &URL
			}
		case "@type":
			if v != nil {
				var typeVar TypeBasicMediaGraphEndpoint
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				mgte.Type = typeVar
			}
		}
	}

	return nil
}

// MediaGraphTLSValidationOptions options for controlling the authentication of TLS endpoints.
type MediaGraphTLSValidationOptions struct {
	// IgnoreHostname - Boolean value ignoring the host name (common name) during validation.
	IgnoreHostname *string `json:"ignoreHostname,omitempty"`
	// IgnoreSignature - Boolean value ignoring the integrity of the certificate chain at the current time.
	IgnoreSignature *string `json:"ignoreSignature,omitempty"`
}

// MediaGraphTopology describes a graph topology.
type MediaGraphTopology struct {
	autorest.Response `json:"-"`
	Name              *string                       `json:"name,omitempty"`
	APIVersion        *string                       `json:"@apiVersion,omitempty"`
	SystemData        *MediaGraphSystemData         `json:"systemData,omitempty"`
	Properties        *MediaGraphTopologyProperties `json:"properties,omitempty"`
}

// MediaGraphTopologyCollection collection of graph topologies.
type MediaGraphTopologyCollection struct {
	autorest.Response `json:"-"`
	// Value - Collection of graph topologies.
	Value *[]MediaGraphTopology `json:"value,omitempty"`
	// ContinuationToken - Continuation token to use in subsequent calls to enumerate through the graph topologies collection (when the collection contains too many results to return in one response).
	ContinuationToken *string `json:"@continuationToken,omitempty"`
}

// MediaGraphTopologyProperties describes the properties of a graph topology.
type MediaGraphTopologyProperties struct {
	Description *string                           `json:"description,omitempty"`
	Parameters  *[]MediaGraphParameterDeclaration `json:"parameters,omitempty"`
	Sources     *[]BasicMediaGraphSource          `json:"sources,omitempty"`
	Processors  *[]BasicMediaGraphProcessor       `json:"processors,omitempty"`
	Sinks       *[]BasicMediaGraphSink            `json:"sinks,omitempty"`
}

// UnmarshalJSON is the custom unmarshaler for MediaGraphTopologyProperties struct.
func (mgtp *MediaGraphTopologyProperties) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "description":
			if v != nil {
				var description string
				err = json.Unmarshal(*v, &description)
				if err != nil {
					return err
				}
				mgtp.Description = &description
			}
		case "parameters":
			if v != nil {
				var parameters []MediaGraphParameterDeclaration
				err = json.Unmarshal(*v, &parameters)
				if err != nil {
					return err
				}
				mgtp.Parameters = &parameters
			}
		case "sources":
			if v != nil {
				sources, err := unmarshalBasicMediaGraphSourceArray(*v)
				if err != nil {
					return err
				}
				mgtp.Sources = &sources
			}
		case "processors":
			if v != nil {
				processors, err := unmarshalBasicMediaGraphProcessorArray(*v)
				if err != nil {
					return err
				}
				mgtp.Processors = &processors
			}
		case "sinks":
			if v != nil {
				sinks, err := unmarshalBasicMediaGraphSinkArray(*v)
				if err != nil {
					return err
				}
				mgtp.Sinks = &sinks
			}
		}
	}

	return nil
}

// MediaGraphUnsecuredEndpoint an endpoint that the media graph can connect to, with no encryption in
// transit.
type MediaGraphUnsecuredEndpoint struct {
	// Credentials - Polymorphic credentials to be presented to the endpoint.
	Credentials BasicMediaGraphCredentials `json:"credentials,omitempty"`
	// URL - Url for the endpoint.
	URL *string `json:"url,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphEndpoint', 'TypeMicrosoftMediaMediaGraphUnsecuredEndpoint', 'TypeMicrosoftMediaMediaGraphTLSEndpoint'
	Type TypeBasicMediaGraphEndpoint `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphUnsecuredEndpoint.
func (mgue MediaGraphUnsecuredEndpoint) MarshalJSON() ([]byte, error) {
	mgue.Type = TypeMicrosoftMediaMediaGraphUnsecuredEndpoint
	objectMap := make(map[string]interface{})
	objectMap["credentials"] = mgue.Credentials
	if mgue.URL != nil {
		objectMap["url"] = mgue.URL
	}
	if mgue.Type != "" {
		objectMap["@type"] = mgue.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphUnsecuredEndpoint is the BasicMediaGraphEndpoint implementation for MediaGraphUnsecuredEndpoint.
func (mgue MediaGraphUnsecuredEndpoint) AsMediaGraphUnsecuredEndpoint() (*MediaGraphUnsecuredEndpoint, bool) {
	return &mgue, true
}

// AsMediaGraphTLSEndpoint is the BasicMediaGraphEndpoint implementation for MediaGraphUnsecuredEndpoint.
func (mgue MediaGraphUnsecuredEndpoint) AsMediaGraphTLSEndpoint() (*MediaGraphTLSEndpoint, bool) {
	return nil, false
}

// AsMediaGraphEndpoint is the BasicMediaGraphEndpoint implementation for MediaGraphUnsecuredEndpoint.
func (mgue MediaGraphUnsecuredEndpoint) AsMediaGraphEndpoint() (*MediaGraphEndpoint, bool) {
	return nil, false
}

// AsBasicMediaGraphEndpoint is the BasicMediaGraphEndpoint implementation for MediaGraphUnsecuredEndpoint.
func (mgue MediaGraphUnsecuredEndpoint) AsBasicMediaGraphEndpoint() (BasicMediaGraphEndpoint, bool) {
	return &mgue, true
}

// UnmarshalJSON is the custom unmarshaler for MediaGraphUnsecuredEndpoint struct.
func (mgue *MediaGraphUnsecuredEndpoint) UnmarshalJSON(body []byte) error {
	var m map[string]*json.RawMessage
	err := json.Unmarshal(body, &m)
	if err != nil {
		return err
	}
	for k, v := range m {
		switch k {
		case "credentials":
			if v != nil {
				credentials, err := unmarshalBasicMediaGraphCredentials(*v)
				if err != nil {
					return err
				}
				mgue.Credentials = credentials
			}
		case "url":
			if v != nil {
				var URL string
				err = json.Unmarshal(*v, &URL)
				if err != nil {
					return err
				}
				mgue.URL = &URL
			}
		case "@type":
			if v != nil {
				var typeVar TypeBasicMediaGraphEndpoint
				err = json.Unmarshal(*v, &typeVar)
				if err != nil {
					return err
				}
				mgue.Type = typeVar
			}
		}
	}

	return nil
}

// MediaGraphUsernamePasswordCredentials username/password credential pair.
type MediaGraphUsernamePasswordCredentials struct {
	// Username - Username for a username/password pair.
	Username *string `json:"username,omitempty"`
	// Password - Password for a username/password pair.
	Password *string `json:"password,omitempty"`
	// Type - Possible values include: 'TypeMediaGraphCredentials', 'TypeMicrosoftMediaMediaGraphUsernamePasswordCredentials', 'TypeMicrosoftMediaMediaGraphHTTPHeaderCredentials'
	Type TypeBasicMediaGraphCredentials `json:"@type,omitempty"`
}

// MarshalJSON is the custom marshaler for MediaGraphUsernamePasswordCredentials.
func (mgupc MediaGraphUsernamePasswordCredentials) MarshalJSON() ([]byte, error) {
	mgupc.Type = TypeMicrosoftMediaMediaGraphUsernamePasswordCredentials
	objectMap := make(map[string]interface{})
	if mgupc.Username != nil {
		objectMap["username"] = mgupc.Username
	}
	if mgupc.Password != nil {
		objectMap["password"] = mgupc.Password
	}
	if mgupc.Type != "" {
		objectMap["@type"] = mgupc.Type
	}
	return json.Marshal(objectMap)
}

// AsMediaGraphUsernamePasswordCredentials is the BasicMediaGraphCredentials implementation for MediaGraphUsernamePasswordCredentials.
func (mgupc MediaGraphUsernamePasswordCredentials) AsMediaGraphUsernamePasswordCredentials() (*MediaGraphUsernamePasswordCredentials, bool) {
	return &mgupc, true
}

// AsMediaGraphHTTPHeaderCredentials is the BasicMediaGraphCredentials implementation for MediaGraphUsernamePasswordCredentials.
func (mgupc MediaGraphUsernamePasswordCredentials) AsMediaGraphHTTPHeaderCredentials() (*MediaGraphHTTPHeaderCredentials, bool) {
	return nil, false
}

// AsMediaGraphCredentials is the BasicMediaGraphCredentials implementation for MediaGraphUsernamePasswordCredentials.
func (mgupc MediaGraphUsernamePasswordCredentials) AsMediaGraphCredentials() (*MediaGraphCredentials, bool) {
	return nil, false
}

// AsBasicMediaGraphCredentials is the BasicMediaGraphCredentials implementation for MediaGraphUsernamePasswordCredentials.
func (mgupc MediaGraphUsernamePasswordCredentials) AsBasicMediaGraphCredentials() (BasicMediaGraphCredentials, bool) {
	return &mgupc, true
}
