package arcvmware

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

// AllocationMethod enumerates the values for allocation method.
type AllocationMethod string

const (
	// Dynamic ...
	Dynamic AllocationMethod = "dynamic"
	// Linklayer ...
	Linklayer AllocationMethod = "linklayer"
	// Other ...
	Other AllocationMethod = "other"
	// Random ...
	Random AllocationMethod = "random"
	// Static ...
	Static AllocationMethod = "static"
	// Unset ...
	Unset AllocationMethod = "unset"
)

// PossibleAllocationMethodValues returns an array of possible values for the AllocationMethod const type.
func PossibleAllocationMethodValues() []AllocationMethod {
	return []AllocationMethod{Dynamic, Linklayer, Other, Random, Static, Unset}
}

// DiskMode enumerates the values for disk mode.
type DiskMode string

const (
	// Append ...
	Append DiskMode = "append"
	// IndependentNonpersistent ...
	IndependentNonpersistent DiskMode = "independent_nonpersistent"
	// IndependentPersistent ...
	IndependentPersistent DiskMode = "independent_persistent"
	// Nonpersistent ...
	Nonpersistent DiskMode = "nonpersistent"
	// Persistent ...
	Persistent DiskMode = "persistent"
	// Undoable ...
	Undoable DiskMode = "undoable"
)

// PossibleDiskModeValues returns an array of possible values for the DiskMode const type.
func PossibleDiskModeValues() []DiskMode {
	return []DiskMode{Append, IndependentNonpersistent, IndependentPersistent, Nonpersistent, Persistent, Undoable}
}

// DiskMode1 enumerates the values for disk mode 1.
type DiskMode1 string

const (
	// DiskMode1Append ...
	DiskMode1Append DiskMode1 = "append"
	// DiskMode1IndependentNonpersistent ...
	DiskMode1IndependentNonpersistent DiskMode1 = "independent_nonpersistent"
	// DiskMode1IndependentPersistent ...
	DiskMode1IndependentPersistent DiskMode1 = "independent_persistent"
	// DiskMode1Nonpersistent ...
	DiskMode1Nonpersistent DiskMode1 = "nonpersistent"
	// DiskMode1Persistent ...
	DiskMode1Persistent DiskMode1 = "persistent"
	// DiskMode1Undoable ...
	DiskMode1Undoable DiskMode1 = "undoable"
)

// PossibleDiskMode1Values returns an array of possible values for the DiskMode1 const type.
func PossibleDiskMode1Values() []DiskMode1 {
	return []DiskMode1{DiskMode1Append, DiskMode1IndependentNonpersistent, DiskMode1IndependentPersistent, DiskMode1Nonpersistent, DiskMode1Persistent, DiskMode1Undoable}
}

// NICType enumerates the values for nic type.
type NICType string

const (
	// E1000 ...
	E1000 NICType = "e1000"
	// E1000e ...
	E1000e NICType = "e1000e"
	// Pcnet32 ...
	Pcnet32 NICType = "pcnet32"
	// Vmxnet ...
	Vmxnet NICType = "vmxnet"
	// Vmxnet2 ...
	Vmxnet2 NICType = "vmxnet2"
	// Vmxnet3 ...
	Vmxnet3 NICType = "vmxnet3"
)

// PossibleNICTypeValues returns an array of possible values for the NICType const type.
func PossibleNICTypeValues() []NICType {
	return []NICType{E1000, E1000e, Pcnet32, Vmxnet, Vmxnet2, Vmxnet3}
}

// OsType enumerates the values for os type.
type OsType string

const (
	// OsTypeLinux ...
	OsTypeLinux OsType = "Linux"
	// OsTypeOther ...
	OsTypeOther OsType = "Other"
	// OsTypeWindows ...
	OsTypeWindows OsType = "Windows"
)

// PossibleOsTypeValues returns an array of possible values for the OsType const type.
func PossibleOsTypeValues() []OsType {
	return []OsType{OsTypeLinux, OsTypeOther, OsTypeWindows}
}

// OsType1 enumerates the values for os type 1.
type OsType1 string

const (
	// OsType1Linux ...
	OsType1Linux OsType1 = "Linux"
	// OsType1Other ...
	OsType1Other OsType1 = "Other"
	// OsType1Windows ...
	OsType1Windows OsType1 = "Windows"
)

// PossibleOsType1Values returns an array of possible values for the OsType1 const type.
func PossibleOsType1Values() []OsType1 {
	return []OsType1{OsType1Linux, OsType1Other, OsType1Windows}
}

// PowerOnBoot enumerates the values for power on boot.
type PowerOnBoot string

const (
	// Disabled ...
	Disabled PowerOnBoot = "disabled"
	// Enabled ...
	Enabled PowerOnBoot = "enabled"
)

// PossiblePowerOnBootValues returns an array of possible values for the PowerOnBoot const type.
func PossiblePowerOnBootValues() []PowerOnBoot {
	return []PowerOnBoot{Disabled, Enabled}
}

// PowerOnBoot1 enumerates the values for power on boot 1.
type PowerOnBoot1 string

const (
	// PowerOnBoot1Disabled ...
	PowerOnBoot1Disabled PowerOnBoot1 = "disabled"
	// PowerOnBoot1Enabled ...
	PowerOnBoot1Enabled PowerOnBoot1 = "enabled"
)

// PossiblePowerOnBoot1Values returns an array of possible values for the PowerOnBoot1 const type.
func PossiblePowerOnBoot1Values() []PowerOnBoot1 {
	return []PowerOnBoot1{PowerOnBoot1Disabled, PowerOnBoot1Enabled}
}

// Sharing enumerates the values for sharing.
type Sharing string

const (
	// NoSharing ...
	NoSharing Sharing = "noSharing"
	// PhysicalSharing ...
	PhysicalSharing Sharing = "physicalSharing"
	// VirtualSharing ...
	VirtualSharing Sharing = "virtualSharing"
)

// PossibleSharingValues returns an array of possible values for the Sharing const type.
func PossibleSharingValues() []Sharing {
	return []Sharing{NoSharing, PhysicalSharing, VirtualSharing}
}

// SkipShutdown enumerates the values for skip shutdown.
type SkipShutdown string

const (
	// False ...
	False SkipShutdown = "false"
	// True ...
	True SkipShutdown = "true"
)

// PossibleSkipShutdownValues returns an array of possible values for the SkipShutdown const type.
func PossibleSkipShutdownValues() []SkipShutdown {
	return []SkipShutdown{False, True}
}

// Type enumerates the values for type.
type Type string

const (
	// KubeConfig ...
	KubeConfig Type = "KubeConfig"
	// ListCredential ...
	ListCredential Type = "ListCredential"
)

// PossibleTypeValues returns an array of possible values for the Type const type.
func PossibleTypeValues() []Type {
	return []Type{KubeConfig, ListCredential}
}

// Type1 enumerates the values for type 1.
type Type1 string

const (
	// Buslogic ...
	Buslogic Type1 = "buslogic"
	// Lsilogic ...
	Lsilogic Type1 = "lsilogic"
	// Lsilogicsas ...
	Lsilogicsas Type1 = "lsilogicsas"
	// Pvscsi ...
	Pvscsi Type1 = "pvscsi"
)

// PossibleType1Values returns an array of possible values for the Type1 const type.
func PossibleType1Values() []Type1 {
	return []Type1{Buslogic, Lsilogic, Lsilogicsas, Pvscsi}
}
